<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング言語 Crystal</title>
    <description>Ruby のような構文で型推論のあるコンパイル言語</description>
    <link>https://ja.crystal-lang.org</link>
    <atom:link href="https://ja.crystal-lang.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Crystal 1.1.0 is released!</title>
        <description>&lt;p&gt;We are releasing the first post-1.0 release, making efforts to keep our promise of making regular releases each 3 months, a bit delayed because of the &lt;a href=&quot;/conference&quot;&gt;conference&lt;/a&gt;, and with special focus on keeping the language stability. Below we list the most important or interesting changes, without mentioning the several bugfixes. For details visit the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/1.1.0&quot;&gt;release’s notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;p&gt;In this release we included &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.1.0&quot;&gt;166 PRs since the 1.0.0 release&lt;/a&gt; by 28 contributors. We thank all the effort put into improving the language and its stdlib! ❤️&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;Splats can now be embedded in enumerable literals and in type definitions (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10429&quot;&gt;#10429&lt;/a&gt;). A few examples:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {true, 1, 'a'}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Tuple(Bool, Int32, Char)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Works in type annotations too&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ccae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ['&amp;lt;', 'a', 'b', 'c', 'd', 'e', '&amp;gt;']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Set{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The type of a while expression is now the union of all break expressions within the body, plus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil&lt;/code&gt; if the condition isn’t exactly the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; literal; the while expression returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; if the condition fails. The type of a break expression is computed similarly to a break inside a block or a return (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil&lt;/code&gt; if empty, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tuple&lt;/code&gt; if multiple values) (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10566&quot;&gt;#10566&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# First the first non-blank line in STDIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first_non_blank_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gets&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_non_blank_line&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;

&lt;p&gt;It is now possible to access the top level module with the special instance variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@top_level&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10682&quot;&gt;#10682&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;FOO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@top_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_constant?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NumberLiteral&lt;/code&gt; now includes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_number&lt;/code&gt; method to obtain the pure number, without any &lt;em&gt;stringification&lt;/em&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10802&quot;&gt;#10802&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10_u8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We included a small breaking change, as there was a mismatch between the documentation and the code regarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path#global?&lt;/code&gt;. The former &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path#global&lt;/code&gt; is now deprecated in favor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path#global?&lt;/code&gt;, whose name better represents it (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10812&quot;&gt;#10812&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There is a new macro method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASTNode#nil?&lt;/code&gt; for querying if an object is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NilLiteral&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nop&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10850&quot;&gt;#10850&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10616&quot;&gt;#10616&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;stdlib&quot;&gt;Stdlib&lt;/h2&gt;

&lt;p&gt;There were several changes that are not supposed to have a direct impact on the users. The most important one to note is that to help get better error messages and documentation, several methods were annotated with expected types. Adding typing annotations might break existing code in specific scenarios so, if this happens to you, please let us now. Also, we are growing the native Windows support, requiring several refactors.&lt;/p&gt;

&lt;h3 id=&quot;numeric&quot;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;It is now possible to create numbers from different representations using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float32.new(&quot;1.1&quot;, whitespace:false)&lt;/code&gt; ((&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10422&quot;&gt;#10422&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#positive?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#negative?&lt;/code&gt; methods for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10601&quot;&gt;#10601&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigFloat&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt; got rounding modes (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10618&quot;&gt;#10618&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10798&quot;&gt;#10798&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;Likewise to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt; class includes now sub/superset checking methods (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/7500&quot;&gt;#7500&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#subset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#proper_subset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#superset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#proper_superset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, we  generalized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number#step&lt;/code&gt; with a new &lt;a href=&quot;https://crystal-lang.org/api/1.1.0/Steppable.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Steppable&lt;/code&gt;&lt;/a&gt; module, that is included in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10279&quot;&gt;#10279&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finally, it is now possible to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#truncate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt;, to efficiently remove elements from both ends (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10712&quot;&gt;#10712&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;crypto&quot;&gt;Crypto&lt;/h3&gt;

&lt;p&gt;New methods for getting peer certificates and signatures in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenSSL&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8005&quot;&gt;#8005&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;Now it is possible to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path&lt;/code&gt; for the methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileUtils&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10747&quot;&gt;#10747&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth2::Client&lt;/code&gt; supports the customization of its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Client&lt;/code&gt; node (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10452&quot;&gt;10452&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;The segfault handler is now implemented in Crystal, in practice meaning that the compilation process of Crystal is simpler: it does not require the former external &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcrystal&lt;/code&gt;. For package maintainers, this means building &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcrystal.a&lt;/code&gt; (which was part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make deps&lt;/code&gt; recipe) is obsolete now. The C code for this library has been removed and packaging instructions need to be updated. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make deps&lt;/code&gt; is no longer necessary for building arbitrary Crystal programs; now it only builds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm_ext.a&lt;/code&gt;, only required for linking against LLVM (for example when building the compiler itself).&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;The Yaml parser now supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10715&quot;&gt;#10715&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/07/16/1.1.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/07/16/1.1.0-released.html</guid>
      </item>
    
      <item>
        <title>IRC channel moved to Libera Chat</title>
        <description>&lt;p&gt;Due to the recent changes on management in the Freenode network and the subsequent migration of the majority of active users to Libera Chat, we have moved our IRC presence there, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://web.libera.chat/#crystal-lang&quot;&gt;#crystal-lang&lt;/a&gt; on Libera Chat will be our primary IRC presence from now on. The bridge to our Gitter room has moved there, too.&lt;/p&gt;

&lt;p&gt;Learn more about meeting other Crystal users on our &lt;a href=&quot;/community&quot;&gt;community page&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat.html</guid>
      </item>
    
      <item>
        <title>Behind the scenes of the past two months</title>
        <description>&lt;p&gt;A couple of months since the first official release, the steam of PR reviewing and merging has appeased a bit. This gives us an opportunity to share some of what’s been happening behind the scenes: a bunch of big things are coming!&lt;/p&gt;

&lt;p&gt;We’ve already mentioned important &lt;a href=&quot;https://crystal-lang.org/2021/03/22/crystal-core-team-announcements.html&quot;&gt;changes in the Core Team composition&lt;/a&gt;. In practice, this involved a great deal of passing knowledge on to the new leadership. More importantly, the 1.0 release presented us with an opportunity to pause and think about how we want the language to evolve and how we want to conduct the project from a higher perspective.&lt;/p&gt;

&lt;p&gt;Thus, we have set the following list of priorities to help us steer our actions:&lt;/p&gt;

&lt;h3 id=&quot;transparency&quot;&gt;Transparency&lt;/h3&gt;

&lt;p&gt;Transparency has always been a cornerstone of how Crystal is led and developed. It is very important for us to continue along this line, and we’re thinking of new ways to let our community know how the decision processes work in the governance of Crystal. In this respect we took two steps: first, we published the &lt;a href=&quot;https://crystal-lang.org/reference/governance.html&quot;&gt;Crystal governance document&lt;/a&gt;, where we outlined the bodies in charge of running Crystal, together with the processes we follow for making decisions about the language. Second, we published a new &lt;a href=&quot;https://crystal-lang.org/team&quot;&gt;Team page&lt;/a&gt;, where everyone can see at a glance who is involved in the day-to-day management of the language.&lt;/p&gt;

&lt;h3 id=&quot;growing-the-core-team&quot;&gt;Growing the Core Team&lt;/h3&gt;

&lt;p&gt;With a few members becoming inactive, we wanted to grow the number of core members to keep our pace and, if possible, increase it. In this respect, we are very happy to announce that &lt;a href=&quot;https://github.com/oprypin/&quot;&gt;Oleh Prypin (oprypin)&lt;/a&gt; is our newest addition to the team, and our second run of voting in a member in accordance with the new governance (the first one being for my own inclusion). Oleh has been an active member of our community since 2015, and has shown a great capacity to improve the language and its ecosystem in every one of his contributions.&lt;/p&gt;

&lt;h3 id=&quot;fixed-releases&quot;&gt;Fixed releases&lt;/h3&gt;

&lt;p&gt;We want the community to know when to expect each new release, so we are working on ways to make them more regular, with a freeze period of 2-3 weeks in order to let people update their shards and programs, and work on possible regressions. We are still working on the details, but likely there will be three months between a 1.x and 1.(x+1) release.&lt;/p&gt;

&lt;h3 id=&quot;native-support-on-windows-and-the-newly-released-macs&quot;&gt;Native support on Windows and the newly released Macs&lt;/h3&gt;

&lt;p&gt;Aiming for wider adoption, we want every major platform to have a native Crystal compiler. We have made significant steps towards Windows support, with the sockets library being almost ready. As for the ARM Macs, we need to get our compiler working with the latest versions of the LLVM framework, a hard stone to crack in which we have already made good progress.&lt;/p&gt;

&lt;p&gt;As you can see, these past two months have been quite busy attacking several fronts, including the preparation of what will surely be an amazing &lt;a href=&quot;https://crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html&quot;&gt;conference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;

&lt;p&gt;Stay tuned, there’s a lot more coming!&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/06/01/behind-the-scenes.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/06/01/behind-the-scenes.html</guid>
      </item>
    
      <item>
        <title>Announcing new apt and rpm repositories</title>
        <description>&lt;p&gt;With our previous distribution hosting at &lt;a href=&quot;https://bintray.com/crystal&quot;&gt;bintray&lt;/a&gt;
shutting down, we transitioned to the &lt;a href=&quot;https://build.opensuse.org&quot;&gt;Open Build Service (OBS)&lt;/a&gt;,
a cross-platform package building service provided by openSUSE.&lt;/p&gt;

&lt;p&gt;Instead of just hosting the packages, it takes care of the entire build process.
For now we continue to provide deb and rpm repositories for x86_64 and i686,
but more platforms and architectures will follow.&lt;/p&gt;

&lt;p&gt;«««&amp;lt; HEAD
All packages are available on OBS at &lt;a href=&quot;https://build.opensuse.org/package/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;.
=======
All packages are available on OBS at &lt;a href=&quot;https://build.opensuse.org/project/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;p&gt;upstream/unstable
It offers an &lt;a href=&quot;https://software.opensuse.org/download.html?project=devel%3Alanguages%3Acrystal&amp;amp;package=crystal&quot;&gt;installation page&lt;/a&gt; with detailed instructions for the many different
target systems.
Our own installation instructions at &lt;a href=&quot;/install&quot;&gt;crystal-lang.org/install&lt;/a&gt; have been updated,
including the automatic installer script.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since bintray is shutting down all operations on May 1st, 2021 our previous repositories
won’t be available anymore. Please update to the new OBS repositories.
Running the updated installation script should override the previous configuration
in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/crystal.list&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/yum.repos.d/crystal.repo&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Only the latest stable release Crystal 1.0.0 is available in the new
package repositories.
Thus the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--channel&lt;/code&gt; flag on the installation script is currently ignored,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--crystal&lt;/code&gt; only allows the values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.0&lt;/code&gt; (with identical semantics).
Nightly builds and unstable releases will be available in the future.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories.html</guid>
      </item>
    
      <item>
        <title>Announcing Crystal 1.0 Conference</title>
        <description>&lt;p&gt;A decade ago, when Crystal was a quirky idea that a few people talked about in their spare time at Manas, it was impossible to think we would go through so many things on our way to releasing a stable and production ready 1.0 version.
It was also unimaginable that such a generous community would form around Crystal, with people from all over the world that have been following every development, providing their views and advice, and contributing to the project both financially and with their work.&lt;/p&gt;

&lt;p&gt;Going forward, we want to continue the evolution of the language on delighting its users. But we still want to &lt;strong&gt;take a moment to celebrate the 1.0 milestone&lt;/strong&gt;, and we decided a conference was the best way to do that.&lt;/p&gt;

&lt;p&gt;The online conference takes place on &lt;strong&gt;July 8, 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-a-crystal-10-launch-conference&quot;&gt;Why a Crystal 1.0 Launch Conference?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Many people have been a part of the Crystal universe for years, and many others are only now hearing about it. A conference is an ideal vehicle for those who’ve been around for a long time to show the newcomers what it’s all about.&lt;/li&gt;
  &lt;li&gt;Over the years, organizations and individuals have trusted Crystal and used it for their projects, some of them experiments and some of them core to their business. We want to give them a platform to share their stories in the hopes that it inspires others to follow in their footsteps.&lt;/li&gt;
  &lt;li&gt;We believe that dialogue is a central element in the evolution of initiatives like Crystal, and a conference creates a space to amplify the conversation channels between the Core Team and the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Conference will feature talks from the team developing the language, people using Crystal in production, folks who have been conducting experiments with Crystal, people who come from other languages and can bring cool insights to our community, and we are extending the invitation to users, developers, and contributors in general who want to present a talk.&lt;/p&gt;

&lt;p&gt;To get your tickets, go to the &lt;a href=&quot;https://www.eventbrite.com.ar/e/crystal-conference-10-launch-tickets-149153252393&quot;&gt;&lt;strong&gt;Crystal Conference 1.0 Launch&lt;/strong&gt; page on Eventbrite&lt;/a&gt;. All proceeds from the event will be destined to maintain and increase the development pace of the language. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal.&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;call-for-talks&quot;&gt;Call for Talks&lt;/h3&gt;

&lt;p&gt;We are inviting Crystal users, developers, and contributors in general to submit their talks for the Crystal 1.0 Conference.&lt;/p&gt;

&lt;p&gt;Topics can cover anything related to the experience with Crystal that is worth sharing to other Crystallers around the globe, or that people from other languages can bring to our community: interesting shards, particularities of the compiler, benchmarks, etc.&lt;/p&gt;

&lt;p&gt;Submit a talk proposal at: &lt;a href=&quot;https://man.as/crystal-cft&quot;&gt;man.as/crystal-cft&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html</guid>
      </item>
    
      <item>
        <title>Crystal Core Team Announcements</title>
        <description>&lt;p&gt;A lot has been going on in the Crystal Core Team, and the community has voiced its need for more (and more frequent) communication. This post is an attempt to catch up with that. I’m taking the license of using “we” for both Crystal and Manas.Tech in this short update.&lt;/p&gt;

&lt;p&gt;The team has been moving forward and focusing on &lt;a href=&quot;/2021/03/22/crystal-1.0-what-to-expect.html&quot;&gt;releasing 1.0&lt;/a&gt;, which is intended to be a more stabilized version of 0.36 with few new additions. We know that we could always add, fix or improve one more little thing before releasing. Still, we believe this is long overdue and that the lack of a v1.0 is an obstacle to adoption.&lt;/p&gt;

&lt;p&gt;We wanted to share the news that Johannes Müller (@straightshoota) has joined Manas as a full-time employee. Johannes is a years-long member and contributor of the Core Team, and we are thrilled to have him join us to continue to work on the language’s evolution.&lt;/p&gt;

&lt;p&gt;Coincidentally, Brian (@bcardiff) and Juan (@waj) will be moving onto new challenges outside Manas, though Juan will remain in an advisory role. This does not affect their commitment to the development of Crystal. They will remain part of the Crystal Core Team and continue to be involved as voluntary contributors.&lt;/p&gt;

&lt;p&gt;But we have excellent news in terms of Crystal leadership coming from Manas. We are incredibly excited to announce that &lt;a href=&quot;https://people.mpi-sws.org/~beta/&quot;&gt;Beta Ziliani&lt;/a&gt; will join the Crystal team at Manas to pick-up the baton. Beta is a programming language researcher with a Ph.D. from the Max Planck Institute for Software Systems and holds a professorship on Advanced Concepts of Programming Languages and Paradigms of Programming. He has been involved with Crystal for a while. Beta was one of the first Manas employees, and he left to pursue his academic research more than ten years ago. We are proud and happy to have him join back.&lt;/p&gt;

&lt;p&gt;We also wanted to announce that Manas will be hiring a Community Manager for Crystal. We know that’s a long overdue need, and we are excited to find the right person to steward this fantastic community. Please help us &lt;a href=&quot;https://manas.tech/join/&quot;&gt;spread the word&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To make all this sustainable in the long term, we need to significantly increase our sponsorships and donations. We believe the 1.0 release and the new roles described will help us move towards that. All small personal donations at &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; help, and if you work at a company that could become a corporate sponsor, please reach out at &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; so we can work with you.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/03/22/crystal-core-team-announcements.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/03/22/crystal-core-team-announcements.html</guid>
      </item>
    
      <item>
        <title>Crystal 1.0 - What to expect</title>
        <description>&lt;p&gt;The release of the first major release of Crystal arrives after many years of hard work. With thousands of contributions from people worldwide, it was finally possible to find consensus for what truly mattered for 1.0 and what could wait for future releases. Getting here wasn’t an easy journey, filled with enriching, controversial, delightful, and endless conversations that, in the end, made it possible to build a language more useful for more users.&lt;/p&gt;

&lt;p&gt;But what does it mean to have a 1.0 version? After all, the process of receiving valuable contributions and evolving the language will not stop after this milestone. Let’s dig deeper to understand the true meaning of this release for the community, especially those already using Crystal in production environments.&lt;/p&gt;

&lt;h2 id=&quot;language-stability&quot;&gt;Language Stability&lt;/h2&gt;

&lt;p&gt;Language stability is probably one of the most prominent and expected reasons to have Crystal 1.0 finally. We received numerous comments from people willing to use the language in production during all these years, but only after we could make a promise of not breaking it from one day to the next.&lt;/p&gt;

&lt;p&gt;After this release, everyone can expect that, at least for any future 1.x version, your code can still compile and work without any significant incompatibility. Language and standard library features won’t be removed or changed in any way that could prevent existing code from compiling and working. The built-in standard library will continue to be enriched but always with backward compatibility in mind.&lt;/p&gt;

&lt;p&gt;Nobody can stop this outstanding community from having groundbreaking ideas every day. But those contributions now belong to a separate branch where the vision for Crystal 2.0 will start to sprout and grow every day.&lt;/p&gt;

&lt;h2 id=&quot;release-plan&quot;&gt;Release Plan&lt;/h2&gt;

&lt;p&gt;To increase the project’s predictability, we plan to release maintenance releases (aka bug fixes) as patch versions. For example, the first maintenance release will be 1.0.1, and it will only include fixes of existing features.&lt;/p&gt;

&lt;p&gt;New features will be reserved for the subsequent minor releases: 1.x. Again, always maintaining backward compatibility with previous versions.&lt;/p&gt;

&lt;p&gt;How many 1.x versions are going to be maintained in parallel? We don’t know for sure yet. That will depend on several factors, including the availability of core team members. For now, we envision maintaining at least two minor versions. That means a 1.0.x might be released even if 1.1.0 is published.&lt;/p&gt;

&lt;p&gt;Because of the “no breaking changes” rule between 1.x → 1.x+1, migration to new minor releases should be relatively easy, with migration plans to be eventually released along with new versions.&lt;/p&gt;

&lt;h2 id=&quot;preliminary-features&quot;&gt;Preliminary Features&lt;/h2&gt;

&lt;p&gt;There are some features currently available in Crystal that didn’t receive official support yet. We plan to keep improving them until we’re confident about their stability. These features will continue to be available on every version, and you can expect an official blessing in a future 1.x release.&lt;/p&gt;

&lt;h3 id=&quot;windows-support&quot;&gt;Windows Support&lt;/h3&gt;

&lt;p&gt;Tremendous progress has been made to make Crystal available on Windows platforms. But there is still tons of work to be done. However, none of that work should impact the semantics or libraries available for *NIX platforms. So we decided not to delay 1.0 because of incompleteness in this area.&lt;/p&gt;

&lt;p&gt;We keep encouraging the Windows community to continue participating in the support for Crystal in this environment.&lt;/p&gt;

&lt;h3 id=&quot;multithreading&quot;&gt;Multithreading&lt;/h3&gt;

&lt;p&gt;Support to run the Crystal runtime on multiple cores is still a preliminary feature available through the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Dpreview_mt&lt;/code&gt; flag. But there are still many improvements yet to be made to guarantee the language’s expected performance and quality in a multi-core environment.&lt;/p&gt;

&lt;p&gt;And it’s not only a flag to be enabled to let existing code run in parallel. Idioms and guidelines must be written to ensure a sane migration into a multi-core environment. More of this can be expected in future 1.x releases.&lt;/p&gt;

&lt;h3 id=&quot;arm&quot;&gt;ARM&lt;/h3&gt;

&lt;p&gt;Porting Crystal into ARM platforms was always important, mainly for embedded and mobile devices. Who didn’t dream about writing applications for iOS and Android one day in this beautiful language? However, recent announcements from Apple to use ARM in computers made this platform even more relevant for the language.&lt;/p&gt;

&lt;p&gt;Significant steps have been taken to improve Crystal code’s cross-compilation, and even our CI runs most of the Crystal specs for every commit on ARM servers! However, some work is still pending to improve the experience for cross-compilation, and even some core libraries need work before we can be confident to give the “production-ready” mark on ARM machines.&lt;/p&gt;

&lt;h1 id=&quot;changes-this-release&quot;&gt;Changes this release&lt;/h1&gt;

&lt;p&gt;The changes that landed in 1.0.0 since 0.36.1 were focused on polishing, but it is worth mentioning some of them here as a migration process. Don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/1.0.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.36.1...1.0.0&quot;&gt;82 commits since 0.36.1&lt;/a&gt; by 25 contributors.&lt;/p&gt;

&lt;p&gt;If we count them since the project inception, there were +13000 commits by +450 contributors, +9000 issues/PRs, and, more importantly, a great community that is sharing experiences, ideas and dreams.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;Tuples allow type-safe accessors with literal indices since the compiler knows which type each component is. In &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10379&quot;&gt;#10379&lt;/a&gt; this knowledge is also available for literal ranges.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {1, &quot;hello&quot;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Tuple(Int32, String)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;String and character literals are no longer allowed to have unicode surrogate halves in escape sequences. You can express arbitrary values using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x&lt;/code&gt; still, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;\uD800&quot;&lt;/code&gt; should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;\xED\xA0\x80&quot;&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10443&quot;&gt;#10443&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;The std-lib got rid of most of the deprecated definitions present until 0.36.1 in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10386&quot;&gt;#10386&lt;/a&gt;. This includes dropping:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;should&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;should_not&lt;/code&gt; overload&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; overloads with trailing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; parameter&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt; methods&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML.new&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dir.rmdir&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File::Info#owner&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File::Info#group&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Request&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::WebSocket&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::LogHandler&lt;/code&gt; methods&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI#full_path&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span#duration&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticArray#[]=&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#delete_if&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process#kill&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionParser.parse!&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; overload&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_attribute?&lt;/code&gt; macro&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt; macros will add the return type annotation when possible. While adding this lazy initialized property no longer accepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; as a valid value. It’s confusing and you probably were not relying on that. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10405&quot;&gt;#10405&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;numeric&quot;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;There were some iterations to add more rounding options to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt; and match the functionality available in other languages. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number#round&lt;/code&gt; accepts a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoundingMode&lt;/code&gt; parameter to choose the exact criteria to use. There are new methods like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number#round_even&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number#round_away&lt;/code&gt; if you prefer them. The default rounding was changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round_even&lt;/code&gt; (a.k.a.: round nearest ties even) matching what other libc, Java, Julia and &lt;a href=&quot;https://web.archive.org/web/20160806053349/http://www.csee.umbc.edu/~tsimo1/CMSC455/IEEE-754-2008.pdf&quot;&gt;IEEE-754&lt;/a&gt; recommendation.&lt;/p&gt;

&lt;p&gt;The new available rounding modes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIES_EVEN&lt;/code&gt;: Rounds towards the nearest integer. If both neighboring integers are equidistant, rounds towards the even neighbor (Banker’s rounding).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIES_AWAY&lt;/code&gt;: Rounds towards the nearest integer. If both neighboring integers are equidistant, rounds away from zero.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TO_ZERO&lt;/code&gt;: Rounds towards zero (truncate).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TO_POSITIVE&lt;/code&gt;: Rounds towards positive infinity (ceil).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TO_NEGATIVE&lt;/code&gt;: Rounds towards negative infinity (floor).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10413&quot;&gt;#10413&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10508&quot;&gt;#10508&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Downcasting a float with infinity, or converting an out-of-range float has a more accurate behavior. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10420&quot;&gt;#10420&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#flat_map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterator#flat_map&lt;/code&gt; works now with mixed element types. As a general guideline, when dealing with multiple types of elements, check your design. You might be translating code from other languages where that is common, but in Crystal, it might not be the tidiest thing to do. Either way, in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10329&quot;&gt;#10329&lt;/a&gt; there is room for improvement on how things are done in the std-lib to allow more and more use cases while using the existing language features.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; serialization is now done as underscored string representation. If you want the old behavior, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum::ValueConverter&lt;/code&gt;. Using the underscore string representation is more stable if enum members are added, so we encourage it as a good default. Read more at  &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10431&quot;&gt;#10431&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The types defined in the XML module were changed from struct to classes to allow future improvements on how the GC interacts with libxml. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10436&quot;&gt;#10436&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;There are a couple of changes regarding how cookies are handled. In &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10486&quot;&gt;#10486&lt;/a&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Cookies.from_headers&lt;/code&gt; method is split into separate server and client alternatives. And the cookie name and values are no longer encoded/decoded due to security reasons. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10442&quot;&gt;#10442&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10485&quot;&gt;#10485&lt;/a&gt;. It is left to the framework and application to choose if there is a default encoding for cookies.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;This release is available in &lt;a href=&quot;/2020/08/24/announcing-new-apt-and-rpm-repositories.html&quot;&gt;Bintray’s apt and rpm repositories post&lt;/a&gt;, as well as GitHub release artifacts. The &lt;a href=&quot;https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/&quot;&gt;sunsetting of Bintray&lt;/a&gt; took us by surprise. We will need to make another move to change the repository location. Luckily we learned enough from the previous process, and not everything is lost. We will attempt to keep the installation script API stable.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/03/22/crystal-1.0-what-to-expect.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/03/22/crystal-1.0-what-to-expect.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.36.1 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.36.1&quot;&gt;Crystal 0.36.1&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes with all the goodies of 0.36.0 together with some fixes and changes that improve compile-time and runtime performance. So, don’t miss the &lt;a href=&quot;/2021/01/26/crystal-0.36.0-released.html&quot;&gt;0.36.0 release announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that this release will be available in &lt;a href=&quot;/2020/08/24/announcing-new-apt-and-rpm-repositories.html&quot;&gt;the new apt and rpm repositories post&lt;/a&gt;, as well as GitHub release artifacts. You might need to update your package repositories.&lt;/p&gt;

&lt;p&gt;This patch release is needed to iterate on some recent additions and fix a couple of regressions. We are thankful for all the early adopters that helped to identify unwanted regressions and performance issues in 0.36.0.&lt;/p&gt;

&lt;p&gt;There were &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.36.0...0.36.1&quot;&gt;14 commits since 0.36.0&lt;/a&gt; by 5 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some highlights in this release. Don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.36.1&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;We reverted the changes introduced in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9871&quot;&gt;#9871&lt;/a&gt;. Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#dup&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#clone&lt;/code&gt; will always return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt;. Even if you are calling them on a subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt;. We don’t encourage inheriting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt;, and with 0.36.0 we notice that some subclasses in the wild were not dup-clone-friendly. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10331&quot;&gt;#10331&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;The eager load of DWARF information was too slow on some use cases. Therefore, we changed it to be opt-in rather than opt-out (See &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10326&quot;&gt;#10326&lt;/a&gt;). Depending on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRYSTAL_LOAD_DWARF&lt;/code&gt; environment variable the DWARF information will be loaded on startup (leading to better backtraces on some crashes), or it will be loaded only on demand when building backtraces, or it will not be loaded at all.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRYSTAL_LOAD_DWARF=0&lt;/code&gt; will never use dwarf information&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRYSTAL_LOAD_DWARF=1&lt;/code&gt; will load dwarf on startup&lt;/li&gt;
  &lt;li&gt;Other values or unset will load dwarf on demand&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;Codegen bugs can sometimes go unnoticed, LLVM 11 helped us find one. There were some invalid pointer operations that were fixed in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10333&quot;&gt;#10333&lt;/a&gt;. With this change Crystal is now compatible with LLVM 11. This in turn helps Apple Silicon M1 support (See &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10348&quot;&gt;#10348&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Constants initialization has been tweaked again to avoid generating code that was a bit too hard to optimize in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10334&quot;&gt;#10334&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We allow macros named as operators or setters-like. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10338&quot;&gt;#10338&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and focusing on releasing 1.0.0-pre1 which should be a more stabilized version of 0.36 without many new additions.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/02/02/crystal-0.36.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/02/02/crystal-0.36.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.36.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.36.0&quot;&gt;Crystal 0.36.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;Since 0.35.1 there has been lots and lots of polishing, new features, and important fixes. This created a bigger delta than we wanted to transition from the last 0.x release to the first 1.0-preX. As a result, we are releasing a 0.36.0. This should help the community migrate their packages with less friction to the changes that will appear in 1.0. It will also give us a chance to get rid of a couple of recently introduced deprecations.&lt;/p&gt;

&lt;p&gt;Note that this release will be available in &lt;a href=&quot;/2020/08/24/announcing-new-apt-and-rpm-repositories.html&quot;&gt;the new apt and rpm repositories post&lt;/a&gt;, as well as GitHub release artifacts. You might need to update your package repositories.&lt;/p&gt;

&lt;p&gt;There were &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.35.1...0.36.0&quot;&gt;346 commits since 0.35.1&lt;/a&gt; by 54 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some highlights in this release. Don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.36.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;Although instance variables can have annotations, we must apply them in the base class that declares them. So we reject annotations on instance variables redefined in a child class. We might lift this restriction in the future, but we are going to play it safe first. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9502&quot;&gt;#9502&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**&lt;/code&gt; operator is right-associative from now on. This matches Ruby and a couple of other programming languages. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 ** 2 ** 3 == 2 ** (2 ** 3) == 256&lt;/code&gt;. But note that the negation is done before the exponentiation because of how we parse negative number literals. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2 ** 2 == (-2) ** 2 == 4&lt;/code&gt;, which is different to Ruby. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9684&quot;&gt;#9684&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some releases ago &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeNode#annotation&lt;/code&gt; was added. The former less powerful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeNode#has_attribute?&lt;/code&gt; is deprecated now. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9950&quot;&gt;#9950&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;There are several fixes that, although formally lead to breaking-changes, are mostly edge cases that required some polishing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can’t use keywords as block arguments names. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9704&quot;&gt;#9704&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a-b -c&lt;/code&gt; expression is now correctly parsed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a - b) - c&lt;/code&gt;. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9652&quot;&gt;#9652&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9884&quot;&gt;#9884&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using abstract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;s, the compiler will enforce a couple of additional rules that should improve the maintenance of the code base.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Abstract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt; implementations must honor abstract declaration regarding type restrictions, splats, default values, and keyword arguments.
&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9585&quot;&gt;#9585&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9634&quot;&gt;#9634&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9633&quot;&gt;#9633&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Abstract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt; implementations must honor return type abstract declaration. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9810&quot;&gt;#9810&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A simple example of what this enforce would be:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Error: because Foo#m can be called with no argument.&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;#           Declare it as def m(x = 1) to make the compiler happy.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Regarding typing, we improved a couple of stories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The type variables unification is more correct regarding union types. (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10267&quot;&gt;#10267&lt;/a&gt;, thanks @HertzDevil)&lt;/li&gt;
  &lt;li&gt;Exhaustive case expressions types to non-nilable value if all the cases allow it. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9659&quot;&gt;#9659&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Auto-casting deals better when the type restriction is a union by using, if possible, the exact type of the literal argument. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9610&quot;&gt;#9610&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typing rules involving closured variables got smarter. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9986&quot;&gt;#9986&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Typing rules involving type restrictions, unions and boolean operators are really smarter. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10147&quot;&gt;#10147&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How smarter you would like to know. Here is a sneak peak of what is now possible but it wasn’t before.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# x : Int32 | Float64 | Char | String&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# when-clauses of &amp;gt;= 3 types now work, including else-branches of the case statement&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Char&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Int32 | Float64 | Char&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# negations of disjunctions now work&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Char | String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Int32 | Float64&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# the de Morgan equivalent of the above also works now&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Char | String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Int32 | Float64&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You can also declare &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;s overloads with different named tuple types. Really handy if you are into using tuples a lot. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10245&quot;&gt;#10245&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A breaking-change that affects C bindings is introduced in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10254&quot;&gt;#10254&lt;/a&gt;. Callbacks within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; should be declared now as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;. One less quirk in the compiler.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;lib YourLib
&lt;span class=&quot;gd&quot;&gt;---  type ACallback = Int32 -&amp;gt; Int32
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ alias ACallback = Int32 -&amp;gt; Int32
&lt;/span&gt;end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;A second breaking-change that affects C bindings is that a Crystal nil value is no longer translated to a null pointer value. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9872&quot;&gt;#9872&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;The following top-level deprecated definitions are dropped: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRC32&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adler32&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gzip&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zip&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zlib&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_color&lt;/code&gt;. You will need to migrate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compress&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest&lt;/code&gt; namespace. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9530&quot;&gt;#9530&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9529&quot;&gt;#9529&lt;/a&gt;, and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9531&quot;&gt;#9531&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SemanticVersion&lt;/code&gt; obeys the standard (as it should). This causes some breaking-changes if you rely on invalid version names, but otherwise you are safe. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9868&quot;&gt;#9868&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately some breaking-changes are silent. There is no simple way to show a warning. Such a case is when the return type of a method is changed. This is what happens to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.size&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileInfo#size&lt;/code&gt; since they now return Int64 instead of UInt64. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10015&quot;&gt;#10015&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;numeric&quot;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;If you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Complex&lt;/code&gt;, you will need to rewrite some operations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Complex#exp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Complex#log&lt;/code&gt;, etc. to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.exp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.log&lt;/code&gt;. This is the same API as for other numerical types. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9739&quot;&gt;#9739&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;text&quot;&gt;Text&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; can hold arbitrary byte sequences. When these turned out to be invalid UTF-8 sequences, operations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String#index&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String#includes?&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char::Reader&lt;/code&gt; were misbehaving. In the presence of an invalid UTF-8 sequence, the data is now iterated a bit more slowly, like 1 byte at a time, until a valid sequence is found. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9713&quot;&gt;#9713&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;There is a set of changes seeking consistency over the collection types. Unfortunately some are silent breaking changes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#reject!&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#select!&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#compact!&lt;/code&gt; return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; always, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt;. Bonus point: you can method chain. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9904&quot;&gt;#9904&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set#delete&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt; to indicate if the element was present. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9590&quot;&gt;#9590&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#reject!&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#delete_if&lt;/code&gt;. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9878&quot;&gt;#9878&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#select&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#grep&lt;/code&gt;. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9711&quot;&gt;#9711&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#key_index&lt;/code&gt; was removed. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10016&quot;&gt;#10016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But not every change is a removal, the following additions are also part of the release!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterator#zip&lt;/code&gt; to take multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterator&lt;/code&gt; arguments. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9944&quot;&gt;#9944&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#shift&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#unshift&lt;/code&gt; got faster. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10081&quot;&gt;#10081&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;We try to have one way to do things. This comes at the expense of needing to migrate old solutions that served us well. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.mapping&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML.mapping&lt;/code&gt; are no longer part of the std-lib since there is a more flexible alternative: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON::Serializable&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML::Serializable&lt;/code&gt;. You can either migrate or, if you still want them, you can use &lt;a href=&quot;https://github.com/crystal-lang/json_mapping.cr&quot;&gt;github:crystal-lang/json_mapping.cr&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/yaml_mapping.cr&quot;&gt;github:crystal-lang/yaml_mapping.cr&lt;/a&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9527&quot;&gt;#9527&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9526&quot;&gt;#9526&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can now declare properties that will be used only on serialization or deserialization. If your model has a field that should be hashed for serialization this comes in really handy. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9567&quot;&gt;#9567&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another addition is that you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_json_discriminator&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_yaml_discriminator&lt;/code&gt; with other types than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;. For example, you can use numbers or enums to map the corresponding type. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9222&quot;&gt;#9222&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10149&quot;&gt;#10149&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;time&quot;&gt;Time&lt;/h3&gt;

&lt;p&gt;It’s time to mention some small breaking-changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span.new&lt;/code&gt; deprecated variants are no longer available. (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10051&quot;&gt;#10051&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span#duration&lt;/code&gt; is deprecated in favor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#abs&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; is already a duration, right? &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10144&quot;&gt;#10144&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;Some breaking-changes are almost bug-fixes, but since they mean changing a known behavior, it is worth mentioning them as such. After &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10180&quot;&gt;#10180&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileUtils.cp_r&lt;/code&gt; will behave as expected when destination is a directory: the destination is calculated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.join(dest_path, File.basename(src_path))&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Params&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI::Params&lt;/code&gt;. In this release there is a deprecated alias that will allow you to deal with this migration more gradually. But I would not count on this alias to remain for long. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10098&quot;&gt;#10098&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another breaking-change is the renaming of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI#full_path&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI#request_target&lt;/code&gt;. Some edge-case behaviors also change to match the expected definition. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10099&quot;&gt;#10099&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI::Params&lt;/code&gt; (former &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Params&lt;/code&gt;), as you know, is used to represent query strings that can hold multiple values for a key. When assigning a new value to a key you will override all values of that key. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9605&quot;&gt;#9605&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color=red&amp;amp;color=blue&amp;amp;console=gameboy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;green&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; =&amp;gt; &quot;color=green&amp;amp;console=gameboy&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Client&lt;/code&gt; can now be used with any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPSocket&lt;/code&gt;. If you happen to have an application that uses HTTP as protocol over UNIX Sockets, like Docker, you can now talk to it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9543&quot;&gt;#9543&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UNIXSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/run/docker.sock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/v1.40/images/json&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;logging&quot;&gt;Logging&lt;/h3&gt;

&lt;p&gt;To have only one module to log them all, the former &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logger&lt;/code&gt; is no longer in the std-lib. Migrate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log&lt;/code&gt; or, for just a little longer, you can keep using &lt;a href=&quot;https://github.com/crystal-lang/logger.cr&quot;&gt;github:crystal-lang/logger.cr&lt;/a&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9525&quot;&gt;#9525&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you need more excuses to migrate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log::Backend&lt;/code&gt; can now emit their entries with different strategies that should help keeping the throughput of the app in the presence of logging. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9432&quot;&gt;#9432&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;crypto&quot;&gt;Crypto&lt;/h3&gt;

&lt;p&gt;Time for some security alerts. The std-lib prevents by default the Secure Client-Initiated Renegotiation vulnerability attack. In &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9815&quot;&gt;#9815&lt;/a&gt; you can find more info and a small patch if you need to secure existing apps. Also, if you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_mode=force-peer&lt;/code&gt;, it is now correctly set up. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9668&quot;&gt;#9668&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest&lt;/code&gt; module is now backed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenSSL&lt;/code&gt;. Most used algorithms have their own class that is easy to use: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest::MD5&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest::SHA1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest::SHA256&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest::SHA512&lt;/code&gt;. Bonus: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest#file&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest#update(IO)&lt;/code&gt; are available to compute digest from file and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; content. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9864&quot;&gt;#9864&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;We hid some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel&lt;/code&gt; API that should have been internal since the beginning. I doubt this will cause any issues. Read more &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9564&quot;&gt;#9564&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel#close&lt;/code&gt; now returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; unless the channel was already closed. This is handy in multi-thread, because you might need to know if the current fiber is the one that actually closed the channel. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9443&quot;&gt;#9443&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;system&quot;&gt;System&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.parse_arguments&lt;/code&gt; will allow you to parse a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; in the same way a POSIX shell does. This is internally used to improve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRYSTAL_OPTS&lt;/code&gt; parsing. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9518&quot;&gt;#9518&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;spec&quot;&gt;Spec&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#should&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#should_not&lt;/code&gt; methods can now take an additional argument for custom failure messages. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10127&quot;&gt;#10127&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;

&lt;p&gt;The CI infrastructure for AArch64 hosted by &lt;a href=&quot;https://www.worksonarm.com/&quot;&gt;works on arm&lt;/a&gt; is making progress. We are still not releasing official packages. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9508&quot;&gt;#9508&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The doc generator got many improvements. In case you weren’t aware, besides generating HTML, it can also export the documentation information as JSON. This allows for the use of other documentation generation tools. With some of the recent additions listed in the changelog you can use &lt;a href=&quot;https://forum.crystal-lang.org/t/new-documentation-site-generator-mkdocstrings-crystal/2848&quot;&gt;mkdocs via some community development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and focusing on releasing 1.0.0-pre1 which should be a more stabilized version of 0.36 without many new additions.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/01/26/crystal-0.36.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/01/26/crystal-0.36.0-released.html</guid>
      </item>
    
      <item>
        <title>Raw Crystal 2020</title>
        <description>&lt;p&gt;先週、Raw Crystal 2020 の第一段が開催されました。すべてのスピーカーのみなさんと参加者のみなさん、そしてこのイベントを現実のものにしてくださった Lorenzo Barasti さんに感謝いたします。この取り組みに貢献できたこと光栄に思います。そして、再びみなさんに会えることを願っています。&lt;/p&gt;

&lt;p&gt;今回、Zoom と YouTube をストリーミングに利用しました。当日は最大 160 人の閲覧者がいて、各発表には最低でも 30 人は参加していました。&lt;/p&gt;

&lt;h2 id=&quot;ビデオ-&quot;&gt;ビデオ 🍿&lt;/h2&gt;

&lt;iframe width=&quot;840&quot; height=&quot;473&quot; src=&quot;https://www.youtube.com/embed/videoseries?list=PLfpFq_WLOW__RIIyWvTgYV4bw2cpav2mJ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;margin: 0 auto; max-width: 100%;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;オーディエンス&quot;&gt;オーディエンス&lt;/h2&gt;

&lt;p&gt;イベントの最中に、Zoom の投票機能を使っていくつかの質問を行いました。集計結果を見てみましょう。&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;地域&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;アジア&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;4&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;オーストラリア&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;ヨーロッパ&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;50&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;北アメリカ&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;33&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;南アメリカ&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;8&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;96&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;年齢&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;16以下&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16 - 19&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;20 - 24&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;25 - 34&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;27&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;35 - 44&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;49&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;45 - 54&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;8&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;55以上&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;96&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参加者のプログラミング背景についての2つの質問の結果を見てみましょう。&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;ここ6ヶ月で最も利用したプログラミング言語&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;C/C++&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;6&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Crystal&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;8&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Javascript&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Java, Scala, Clojure, Kotlin&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;20&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;その他&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;46&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;どれくらいの期間 Crystal を利用してきたか/知っていたか？&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;1ヶ月未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;6ヶ月未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;6&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;1年未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;7&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;3年未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;19&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;3年以上&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;12&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;46&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/12/16/raw-crystal-2020.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/12/16/raw-crystal-2020.html</guid>
      </item>
    
  </channel>
</rss>
