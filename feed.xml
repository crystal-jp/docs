<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング言語 Crystal</title>
    <description>Ruby のような構文で型推論のあるコンパイル言語</description>
    <link>https://ja.crystal-lang.org</link>
    <atom:link href="https://ja.crystal-lang.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Crystal 1.2.1 is released!</title>
        <description>&lt;p&gt;We are releasing the first patch release of the &lt;a href=&quot;https://crystal-lang.org/2021/10/14/1.2.0-released.html&quot;&gt;1.2&lt;/a&gt; series.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;p&gt;In this patch release we included &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.2.1&quot;&gt;4 PRs since the 1.2.1 release&lt;/a&gt; by 4 contributors. This time we’d like to thank the developers that suffered and issued the regressions ❤️ Sorry about that!&lt;/p&gt;

&lt;p&gt;There are just three relevant changes to point out:&lt;/p&gt;

&lt;h2 id=&quot;fixes&quot;&gt;Fixes&lt;/h2&gt;

&lt;p&gt;We had two major regression fixes. The first on is related to the introduction of &lt;a href=&quot;https://github.com/icyleaf/markd/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markd&lt;/code&gt;&lt;/a&gt; to render the API docs (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11040&quot;&gt;#11040&lt;/a&gt;). This lead to a &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/11323&quot;&gt;bug&lt;/a&gt; that was fixed in a recent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markd&lt;/code&gt; version (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11338&quot;&gt;#11338&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The second one is that class variables with a regex &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/11318&quot;&gt;stopped working&lt;/a&gt; in 1.2.0. We fixed it in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11334&quot;&gt;#11334&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;llvm-13-support&quot;&gt;LLVM 13 support&lt;/h2&gt;

&lt;p&gt;Not really a regression, but since LLVM 13 is already out and fixes several bugs that affected Crystal, we decided to start making it available in this patch release. As soon as your platform makes it available to you, you might want to check it out!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/10/21/1.2.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/10/21/1.2.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 1.2.0 is released!</title>
        <description>&lt;p&gt;We are delivering a new release with several bugfixes and improvements. Below we list the most important or interesting changes, without mentioning the several bugfixes. For details visit the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/1.2.0&quot;&gt;release’s notes&lt;/a&gt;. Breaking changes are marked with ⚠️.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;p&gt;In this release we included &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.2.0&quot;&gt;181 PRs since the 1.1.1 release&lt;/a&gt; by 32 contributors. We thank all the effort put into improving the language and its stdlib! ❤️&lt;/p&gt;

&lt;h2 id=&quot;platform-support&quot;&gt;Platform support&lt;/h2&gt;

&lt;p&gt;As mentioned in the preparatory &lt;a href=&quot;https://crystal-lang.org/2021/09/30/preparing-1.2.html&quot;&gt;blog post&lt;/a&gt; for 1.2, we decided to lower the support for 32-bit x86 architecture. This is a direct consequence of focusing our efforts in more popular platforms: we do have some good news to share!&lt;/p&gt;

&lt;p&gt;We are making progress in achieving full native Windows support, in this release including most notably a sockets implementation (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11205&quot;&gt;#11205&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11137&quot;&gt;#11137&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10784&quot;&gt;#10605&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10605&quot;&gt;#10605&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Related to Windows, and also relevant for ARM64 architectures, we fixed an important &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11189&quot;&gt;codegen bug&lt;/a&gt;. We are now in conditions to promote aarch64 platforms to Tier 1, expecting to include packages for them soon. This is also relevant for macOS with the M1 chipset: starting from this release we include a &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/download/1.2.0/crystal-1.2.0-1.universal.pkg&quot;&gt;universal macOS package&lt;/a&gt; that works for x86 and M1 macs.&lt;/p&gt;

&lt;p&gt;We discovered that two bugs appearing on &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/11047&quot;&gt;Windows&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/11021&quot;&gt;M1’s macs&lt;/a&gt; are coming from LLVM 11 and 12. We expect the fix will come with the recently released LLVM 13. Crystal 1.2.0 is compatible with &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10873&quot;&gt;LLVM 12&lt;/a&gt;, although we advice against using LLVM 11 and 12.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;It is now possible to assign a subclass of a generic class to an element of &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11250&quot;&gt;the parent class&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Also pertain to generic classes, there were situations in which the compiler was not properly substituting the generic argument (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11166&quot;&gt;#11166&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11067&quot;&gt;#11067&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The support for &lt;a href=&quot;https://clang.llvm.org/docs/ThinLTO.html&quot;&gt;ThinLTO&lt;/a&gt; compilation was &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11194&quot;&gt;dropped&lt;/a&gt;, since it wasn’t working already since Crystal 0.25.&lt;/p&gt;

&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;

&lt;p&gt;It is possible to add an underscore in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11141&quot;&gt;for loops&lt;/a&gt; to ignore a value. For instance, in the following code the keys of the map are ignored:&lt;/p&gt;
&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Additionally, there is a new &lt;a href=&quot;https://crystal-lang.org/api/1.2.0/Crystal/Macros.html#file_exists?(filename):BoolLiteral-instance-method&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_exists?&lt;/code&gt; macro method&lt;/a&gt; to check the existence of a file (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10540&quot;&gt;#10540&lt;/a&gt;), and &lt;a href=&quot;https://crystal-lang.org/api/1.2.0/Crystal/Macros/ASTNode.html#is_a?(type:TypeNode):BoolLiteral-instance-method&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#is_a?&lt;/code&gt;&lt;/a&gt; now recognizes the AST node hierarchy (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11062&quot;&gt;#11062&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;stdlib&quot;&gt;Stdlib&lt;/h2&gt;

&lt;p&gt;⚠️ We are continuing the trend started in the 1.1.0 version to help get better error messages and documentation: several methods were annotated with expected types. Adding typing annotations might break existing code in specific scenarios so, if this happens to you, please let us now.&lt;/p&gt;

&lt;h3 id=&quot;numeric&quot;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;The major improvement in the numeric area is the steps taken to support 128 bits integers (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11206/&quot;&gt;#11206&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11245&quot;&gt;#11245&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As minor improvements, it is now possible to adjust the precision in the output of &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10926&quot;&gt;Int#to_s&lt;/a&gt;; to iterate the set of representable floats through new methods &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10908&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#next_float&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#prev_float&lt;/code&gt;&lt;/a&gt;; 
to use a negative exponential to a &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10892&quot;&gt;BigDecimal&lt;/a&gt;; and to calculate the &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10549&quot;&gt;integer square root&lt;/a&gt; of a number.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;Mutable collections now include a &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11059&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Indexable::Mutable(T)&lt;/code&gt; module&lt;/a&gt;, which greatly expand the set of operations on certain collections such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BitArray&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deque&lt;/code&gt;. The following now works:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BitArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ba is BitArray[0000000000]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# ba is BitArray[1000000000]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rotate!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# ba is BitArray[0100000000]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Additionally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Indexable::Mutable(T)&lt;/code&gt; was expanded to include stable and unstable sorting methods (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11254&quot;&gt;#11254&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11029&quot;&gt;#11029&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10163&quot;&gt;#10163&lt;/a&gt;). The default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort&lt;/code&gt; operation now calls a stable algorithm.&lt;/p&gt;

&lt;p&gt;⚠️ As a breaking change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#product&lt;/code&gt; was deprecated in favor of the new generic and better named &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10013&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Indexable#cartesian_product&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another two contributions worth of mention: enumerables are equipped with method to tally them with a given predicate (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10922&quot;&gt;Enumerable#tally_by&lt;/a&gt;); and the methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#transpose&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#reject&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#to_h&lt;/code&gt; now work with &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10445&quot;&gt;tuples&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;⚠️ The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO#write_utf8&lt;/code&gt; was deprecated in favor of the more descriptive name &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11051&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO#write_string&lt;/code&gt;&lt;/a&gt;, because you can use it to write strings in all kinds of encodings, depending on the IO’s configuration.
We also fixed a number of bugs related to using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO#write&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO#write_string&lt;/code&gt; to append text to an IO.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;⚠️ In order to improve the security of the stdlib, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI.encode&lt;/code&gt; was &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11248&quot;&gt;deprecated&lt;/a&gt; in favor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI.encode_path&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI.encode_path_segment&lt;/code&gt; whith safer semantics and names better fitting to the purpose.&lt;/p&gt;

&lt;p&gt;There is now support for basic authentication taken from an URI in websockets (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10854&quot;&gt;#10854&lt;/a&gt;), and
proper handling of max-age and expires for cookies (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10564&quot;&gt;#10564&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;text&quot;&gt;Text&lt;/h3&gt;

&lt;p&gt;⚠️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String#unsafe_byte_at&lt;/code&gt; was &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10559&quot;&gt;deprecated&lt;/a&gt; since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; has already a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#to_unsafe&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Crystal now supports &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11215&quot;&gt;Unicode 14.0.0&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;There is a new method &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11072&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML::Node#namespace_definition&lt;/code&gt;&lt;/a&gt; to obtain explicitly-defined XML namespaces of a node, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt;s can now be &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10404&quot;&gt;serialized&lt;/a&gt; to JSON and YAML.&lt;/p&gt;

&lt;h2 id=&quot;tools-new-docs-generator&quot;&gt;Tools: new docs generator&lt;/h2&gt;

&lt;p&gt;The API docs now use &lt;a href=&quot;https://github.com/icyleaf/markd/&quot;&gt;markd&lt;/a&gt; to render Markdown (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11040&quot;&gt;#11040&lt;/a&gt;). This puts an end to the shortcomings caused by the internal renderer implementation.&lt;/p&gt;

&lt;h2 id=&quot;infrastructure&quot;&gt;Infrastructure&lt;/h2&gt;

&lt;p&gt;It is now possible to &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10878&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt;&lt;/a&gt; Crystal.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/10/14/1.2.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/10/14/1.2.0-released.html</guid>
      </item>
    
      <item>
        <title>Preparing for Crystal 1.2</title>
        <description>&lt;p&gt;We have reached the feature freeze period for Crystal 1.2. From now on, only bug fixes will be merged into master. The release is scheduled for the 13th of October. As usual, we invite everyone to test our latest nightly release to ensure that we haven’t included a breaking change by mistake (&lt;a href=&quot;https://hub.docker.com/r/crystallang/crystal/tags?page=1&amp;amp;ordering=last_updated&amp;amp;name=nightly&quot;&gt;docker 🐳&lt;/a&gt;, &lt;a href=&quot;https://crystal-lang.org/install/&quot;&gt;OS packages 💻&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As of today, we have &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.2.0&quot;&gt;162&lt;/a&gt; PRs merged for this version. Thanks to all of those amazing contributors 🙇‍♂️!&lt;/p&gt;

&lt;p&gt;On a bit of a sour note, we are demoting support for 32-bit x86 architectures, moving it from Tier 1 to Tier 2 (that is, &lt;em&gt;expected to build&lt;/em&gt;). As a result, we will not be shipping i386 packages this time. The reason is that &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11096/checks?check_run_id=3331817376&quot;&gt;the specs are failing&lt;/a&gt;, likely due to the amount of memory they consume. Yet, instead of pursuing a solution to the problem, we decided that it was time to continue the trend towards deprecating this architecture, focusing on bringing native support to more popular platforms like ARM64, M1, and Windows. We note this shouldn’t preclude anyone from building it from source, or from getting the packages from the distributions that officially support Crystal.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/09/30/preparing-1.2.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/09/30/preparing-1.2.html</guid>
      </item>
    
      <item>
        <title>Community moderators</title>
        <description>&lt;p&gt;Following GitHub’s &lt;a href=&quot;https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-permission-levels-for-an-organization&quot;&gt;&lt;i&gt;Triage role&lt;/i&gt;&lt;/a&gt;, we decided to create the &lt;em&gt;Community moderator&lt;/em&gt; role.
This new role allows active participants of the community to be granted the ability to assign labels, open/close issues/PRs, apply milestones, mark duplicates, assign issues/PRs and request reviews. This role provides a middle-ground between regular contributors and core team members.&lt;/p&gt;

&lt;p&gt;Community moderators are listed in the relevant section at the &lt;a href=&quot;/team#moderators&quot;&gt;Team page&lt;/a&gt;. If you are an active contributor of the project and feel you can level up your involvement with it, check the &lt;a href=&quot;/team#join_us&quot;&gt;Join the Team&lt;/a&gt; section.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/08/24/triage-role.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/08/24/triage-role.html</guid>
      </item>
    
      <item>
        <title>Installing specific versions of Crystal's binary packages</title>
        <description>&lt;p&gt;When we &lt;a href=&quot;/2021/04/30/new-apt-and-rpm-repositories.html&quot;&gt;moved hosting of Crystal’s binary packages&lt;/a&gt; to the &lt;a href=&quot;https://build.opensuse.org&quot;&gt;Open Build Service (OBS)&lt;/a&gt;,
in May 2021, only the latest release (1.0.0 at that time) was available.&lt;/p&gt;

&lt;p&gt;Since then, there have been more releases (1.1.0 and 1.1.1) but in the package repositories only the latest one was available at any time.&lt;/p&gt;

&lt;p&gt;We’ve now added support for installing specific releases of Crystal via OBS.
There are individual packages for each minor release.&lt;/p&gt;

&lt;p&gt;At the moment, there are three different packages available at &lt;a href=&quot;https://build.opensuse.org/project/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crystal1.0&lt;/code&gt; (1.0.0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crystal1.1&lt;/code&gt; (1.1.1)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crystal&lt;/code&gt; (1.1.1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The non-versioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crystal&lt;/code&gt; package keeps tracking the latest stable release,
versioned packages keep tracking the latest patch release of the respective minor version.&lt;/p&gt;

&lt;p&gt;The new versioned packages are available for all architectures in all repositories on OBS.&lt;/p&gt;

&lt;p&gt;Our own installation instructions at &lt;a href=&quot;/install&quot;&gt;crystal-lang.org/install&lt;/a&gt; have been updated,
including the automatic installer script.&lt;/p&gt;

&lt;p&gt;The installer script allows selecting the version to be installed via tha &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version=x.y&lt;/code&gt; argument.
This argument was previously called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--crystal&lt;/code&gt; and while this name continues to work, it is now considered deprecated.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/08/13/install-specific-versions.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/08/13/install-specific-versions.html</guid>
      </item>
    
      <item>
        <title>Crystal 1.1.1 is released!</title>
        <description>&lt;p&gt;We are releasing the first patch release of the &lt;a href=&quot;https://crystal-lang.org/2021/07/16/1.1.0-released.html&quot;&gt;1.1&lt;/a&gt; series.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;p&gt;In this patch release we included &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.1.1&quot;&gt;9 PRs since the 1.1.0 release&lt;/a&gt; by 2 contributors. This time we’d like to thank the developers that suffered and issued the regressions ❤️ Sorry about that!&lt;/p&gt;

&lt;p&gt;There are just two relevant changes to point out:&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;We had to revert the name of the top-level module. Prior to 1.1.0 it was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, but since we created a new accessor called &lt;a href=&quot;https://crystal-lang.org/reference/syntax_and_semantics/macros/index.html#the-top-level-module&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@top_level&lt;/code&gt;&lt;/a&gt;, we thought we should call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_level&lt;/code&gt; too. Unfortunately that broke a shard, so we revert it to its former name (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10993&quot;&gt;#10993&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;stdlib&quot;&gt;Stdlib&lt;/h2&gt;

&lt;p&gt;As we mentioned in the &lt;a href=&quot;https://crystal-lang.org/2021/07/16/1.1.0-released.html&quot;&gt;1.1.0 release&lt;/a&gt;, we started adding type information to methods of the stdlib, for documentation and better error reporting. Unfortunately, a few annotations were too restrictive and broke existing shards: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#index&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#rindex&lt;/code&gt; return types were erased (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10972&quot;&gt;10972&lt;/a&gt;).&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/07/27/1.1.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/07/27/1.1.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 1.1.0 is released!</title>
        <description>&lt;p&gt;We are releasing the first post-1.0 release, making efforts to keep our promise of making regular releases each 3 months, a bit delayed because of the &lt;a href=&quot;/conference&quot;&gt;conference&lt;/a&gt;, and with special focus on keeping the language stability. Below we list the most important or interesting changes, without mentioning the several bugfixes. For details visit the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/1.1.0&quot;&gt;release’s notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;p&gt;In this release we included &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.1.0&quot;&gt;166 PRs since the 1.0.0 release&lt;/a&gt; by 28 contributors. We thank all the effort put into improving the language and its stdlib! ❤️&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;Splats can now be embedded in enumerable literals and in type definitions (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10429&quot;&gt;#10429&lt;/a&gt;). A few examples:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {true, 1, 'a'}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Tuple(Bool, Int32, Char)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Works in type annotations too&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ccae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ['&amp;lt;', 'a', 'b', 'c', 'd', 'e', '&amp;gt;']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Set{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The type of a while expression is now the union of all break expressions within the body, plus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil&lt;/code&gt; if the condition isn’t exactly the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; literal; the while expression returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; if the condition fails. The type of a break expression is computed similarly to a break inside a block or a return (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil&lt;/code&gt; if empty, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tuple&lt;/code&gt; if multiple values) (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10566&quot;&gt;#10566&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# First the first non-blank line in STDIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first_non_blank_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gets&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_non_blank_line&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;

&lt;p&gt;It is now possible to access the top level module with the special instance variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@top_level&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10682&quot;&gt;#10682&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;FOO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@top_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_constant?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NumberLiteral&lt;/code&gt; now includes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_number&lt;/code&gt; method to obtain the pure number, without any &lt;em&gt;stringification&lt;/em&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10802&quot;&gt;#10802&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10_u8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We included a small breaking change, as there was a mismatch between the documentation and the code regarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path#global?&lt;/code&gt;. The former &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path#global&lt;/code&gt; is now deprecated in favor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path#global?&lt;/code&gt;, whose name better represents it (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10812&quot;&gt;#10812&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There is a new macro method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASTNode#nil?&lt;/code&gt; for querying if an object is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NilLiteral&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nop&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10850&quot;&gt;#10850&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10616&quot;&gt;#10616&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;stdlib&quot;&gt;Stdlib&lt;/h2&gt;

&lt;p&gt;There were several changes that are not supposed to have a direct impact on the users. The most important one to note is that to help get better error messages and documentation, several methods were annotated with expected types. Adding typing annotations might break existing code in specific scenarios so, if this happens to you, please let us now. Also, we are growing the native Windows support, requiring several refactors.&lt;/p&gt;

&lt;h3 id=&quot;numeric&quot;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;It is now possible to create numbers from different representations using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float32.new(&quot;1.1&quot;, whitespace:false)&lt;/code&gt; ((&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10422&quot;&gt;#10422&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#positive?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#negative?&lt;/code&gt; methods for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10601&quot;&gt;#10601&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigFloat&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt; got rounding modes (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10618&quot;&gt;#10618&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10798&quot;&gt;#10798&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;Likewise to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt; class includes now sub/superset checking methods (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/7500&quot;&gt;#7500&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#subset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#proper_subset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#superset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#proper_superset_of?(other : Hash)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, we  generalized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number#step&lt;/code&gt; with a new &lt;a href=&quot;https://crystal-lang.org/api/1.1.0/Steppable.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Steppable&lt;/code&gt;&lt;/a&gt; module, that is included in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10279&quot;&gt;#10279&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finally, it is now possible to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#truncate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt;, to efficiently remove elements from both ends (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10712&quot;&gt;#10712&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;crypto&quot;&gt;Crypto&lt;/h3&gt;

&lt;p&gt;New methods for getting peer certificates and signatures in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenSSL&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8005&quot;&gt;#8005&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;Now it is possible to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path&lt;/code&gt; for the methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileUtils&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10747&quot;&gt;#10747&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth2::Client&lt;/code&gt; supports the customization of its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP::Client&lt;/code&gt; node (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10452&quot;&gt;10452&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;The segfault handler is now implemented in Crystal, in practice meaning that the compilation process of Crystal is simpler: it does not require the former external &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcrystal&lt;/code&gt;. For package maintainers, this means building &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcrystal.a&lt;/code&gt; (which was part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make deps&lt;/code&gt; recipe) is obsolete now. The C code for this library has been removed and packaging instructions need to be updated. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make deps&lt;/code&gt; is no longer necessary for building arbitrary Crystal programs; now it only builds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm_ext.a&lt;/code&gt;, only required for linking against LLVM (for example when building the compiler itself).&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;The Yaml parser now supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt; (&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/10715&quot;&gt;#10715&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/07/16/1.1.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/07/16/1.1.0-released.html</guid>
      </item>
    
      <item>
        <title>IRC channel moved to Libera Chat</title>
        <description>&lt;p&gt;Due to the recent changes on management in the Freenode network and the subsequent migration of the majority of active users to Libera Chat, we have moved our IRC presence there, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://web.libera.chat/#crystal-lang&quot;&gt;#crystal-lang&lt;/a&gt; on Libera Chat will be our primary IRC presence from now on. The bridge to our Gitter room has moved there, too.&lt;/p&gt;

&lt;p&gt;Learn more about meeting other Crystal users on our &lt;a href=&quot;/community&quot;&gt;community page&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat.html</guid>
      </item>
    
      <item>
        <title>Behind the scenes of the past two months</title>
        <description>&lt;p&gt;A couple of months since the first official release, the steam of PR reviewing and merging has appeased a bit. This gives us an opportunity to share some of what’s been happening behind the scenes: a bunch of big things are coming!&lt;/p&gt;

&lt;p&gt;We’ve already mentioned important &lt;a href=&quot;https://crystal-lang.org/2021/03/22/crystal-core-team-announcements.html&quot;&gt;changes in the Core Team composition&lt;/a&gt;. In practice, this involved a great deal of passing knowledge on to the new leadership. More importantly, the 1.0 release presented us with an opportunity to pause and think about how we want the language to evolve and how we want to conduct the project from a higher perspective.&lt;/p&gt;

&lt;p&gt;Thus, we have set the following list of priorities to help us steer our actions:&lt;/p&gt;

&lt;h3 id=&quot;transparency&quot;&gt;Transparency&lt;/h3&gt;

&lt;p&gt;Transparency has always been a cornerstone of how Crystal is led and developed. It is very important for us to continue along this line, and we’re thinking of new ways to let our community know how the decision processes work in the governance of Crystal. In this respect we took two steps: first, we published the &lt;a href=&quot;https://crystal-lang.org/reference/governance.html&quot;&gt;Crystal governance document&lt;/a&gt;, where we outlined the bodies in charge of running Crystal, together with the processes we follow for making decisions about the language. Second, we published a new &lt;a href=&quot;https://crystal-lang.org/team&quot;&gt;Team page&lt;/a&gt;, where everyone can see at a glance who is involved in the day-to-day management of the language.&lt;/p&gt;

&lt;h3 id=&quot;growing-the-core-team&quot;&gt;Growing the Core Team&lt;/h3&gt;

&lt;p&gt;With a few members becoming inactive, we wanted to grow the number of core members to keep our pace and, if possible, increase it. In this respect, we are very happy to announce that &lt;a href=&quot;https://github.com/oprypin/&quot;&gt;Oleh Prypin (oprypin)&lt;/a&gt; is our newest addition to the team, and our second run of voting in a member in accordance with the new governance (the first one being for my own inclusion). Oleh has been an active member of our community since 2015, and has shown a great capacity to improve the language and its ecosystem in every one of his contributions.&lt;/p&gt;

&lt;h3 id=&quot;fixed-releases&quot;&gt;Fixed releases&lt;/h3&gt;

&lt;p&gt;We want the community to know when to expect each new release, so we are working on ways to make them more regular, with a freeze period of 2-3 weeks in order to let people update their shards and programs, and work on possible regressions. We are still working on the details, but likely there will be three months between a 1.x and 1.(x+1) release.&lt;/p&gt;

&lt;h3 id=&quot;native-support-on-windows-and-the-newly-released-macs&quot;&gt;Native support on Windows and the newly released Macs&lt;/h3&gt;

&lt;p&gt;Aiming for wider adoption, we want every major platform to have a native Crystal compiler. We have made significant steps towards Windows support, with the sockets library being almost ready. As for the ARM Macs, we need to get our compiler working with the latest versions of the LLVM framework, a hard stone to crack in which we have already made good progress.&lt;/p&gt;

&lt;p&gt;As you can see, these past two months have been quite busy attacking several fronts, including the preparation of what will surely be an amazing &lt;a href=&quot;https://crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html&quot;&gt;conference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;

&lt;p&gt;Stay tuned, there’s a lot more coming!&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/06/01/behind-the-scenes.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/06/01/behind-the-scenes.html</guid>
      </item>
    
      <item>
        <title>Announcing new apt and rpm repositories</title>
        <description>&lt;p&gt;With our previous distribution hosting at &lt;a href=&quot;https://bintray.com/crystal&quot;&gt;bintray&lt;/a&gt;
shutting down, we transitioned to the &lt;a href=&quot;https://build.opensuse.org&quot;&gt;Open Build Service (OBS)&lt;/a&gt;,
a cross-platform package building service provided by openSUSE.&lt;/p&gt;

&lt;p&gt;Instead of just hosting the packages, it takes care of the entire build process.
For now we continue to provide deb and rpm repositories for x86_64 and i686,
but more platforms and architectures will follow.&lt;/p&gt;

&lt;p&gt;«««&amp;lt; HEAD
All packages are available on OBS at &lt;a href=&quot;https://build.opensuse.org/package/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;.
=======
All packages are available on OBS at &lt;a href=&quot;https://build.opensuse.org/project/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;p&gt;upstream/unstable
It offers an &lt;a href=&quot;https://software.opensuse.org/download.html?project=devel%3Alanguages%3Acrystal&amp;amp;package=crystal&quot;&gt;installation page&lt;/a&gt; with detailed instructions for the many different
target systems.
Our own installation instructions at &lt;a href=&quot;/install&quot;&gt;crystal-lang.org/install&lt;/a&gt; have been updated,
including the automatic installer script.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since bintray is shutting down all operations on May 1st, 2021 our previous repositories
won’t be available anymore. Please update to the new OBS repositories.
Running the updated installation script should override the previous configuration
in  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/crystal.list&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/yum.repos.d/crystal.repo&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Only the latest stable release Crystal 1.0.0 is available in the new
package repositories.
Thus the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--channel&lt;/code&gt; flag on the installation script is currently ignored,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--crystal&lt;/code&gt; only allows the values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.0&lt;/code&gt; (with identical semantics).
Nightly builds and unstable releases will be available in the future.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories.html</guid>
      </item>
    
  </channel>
</rss>
