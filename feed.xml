<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>プログラミング言語 Crystal</title>
  <subtitle>A language for humans and computers</subtitle>
  <link href="https://ja.crystal-lang.org/" rel="alternate" type="text/html" />
  <link href="https://ja.crystal-lang.org/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ja.crystal-lang.org/releases/feed.xml" rel="related" type="application/atom+xml" />
  <updated>2022-11-08T03:13:40+00:00</updated>
  <id>https://ja.crystal-lang.org/feed.xml</id>
    <entry>
      <title>bdw-gc coroutines support</title>
      <author>
        <name>Brian J. Cardiff</name>
        <uri>https://github.com/bcardiff/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2022/02/16/bdw-gc-coroutines-support.html" rel="alternate" type="text/html" title="bdw-gc coroutines support" />
      <published>2022-02-16T00:00:00+00:00</published>
      <updated>2022-02-16T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2022/02/16/bdw-gc-coroutines-support</id>
      <summary type="html">Crystal uses bdw-gc and supports coroutines. Fibers is how coroutines are called here. For many years Crystal has been single-thread with fibers. Single-thread is still the default alternative. Sometime ago we added muti-thread support where each thread can run concurrently multiple fibers. This required some patches and eventual contributions to bdw-gc in order to achieve this since there was no built-in support for coroutines in the library.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2022/02/16/bdw-gc-coroutines-support.html">&lt;p&gt;&lt;a href=&quot;https://crystal-lang.org&quot;&gt;Crystal&lt;/a&gt; uses bdw-gc and supports coroutines. Fibers is how coroutines are called here. For many years Crystal has been single-thread with fibers. Single-thread is still the default alternative. Sometime ago we added muti-thread support where each thread can run concurrently multiple fibers. This required some patches and eventual contributions to bdw-gc in order to achieve this since there was no built-in support for coroutines in the library.&lt;/p&gt;

&lt;p&gt;The support for multi-thread coroutines was gained by allowing the user to control the stack bottom of each thread. Changing the stack bottom and the instruction pointer is what effectively gives life to the coroutines. This is, letting the program choose what portion of the program to execute next without needing to tell the OS about it. Telling the OS would be equivalent to using threads and that would be more expensive.&lt;/p&gt;

&lt;p&gt;So Crystal, and other languages, could benefit from having a mutli-thread program where in each thread multiple coroutines can be executed concurrently.&lt;/p&gt;

&lt;p&gt;When implementing coroutines the runtime will likely have some sort of book-keeping of the existing coroutines that still need to keep executing. The record of these will involve their stack, instruction pointer and persistence of registers among other information that is specific to the runtime.&lt;/p&gt;

&lt;p&gt;The following describes how Crystal uses bdw-gc in single-thread and in multi-thread mode to achieve the coroutines support. We will not focus on the details of the Crystal runtime and its book-keeping, this is mostly focused on the interface with bdw-gc.&lt;/p&gt;

&lt;p&gt;The topic aspects to cover in both scenarios are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What should happen when the current coroutine needs to be switched to another one?&lt;/li&gt;
  &lt;li&gt;How is the bdw-gc set up so it’s aware of all the coroutines, even the ones that are not running and hence are not accessible from the current stack.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;single-thread-coroutines&quot;&gt;single-thread coroutines&lt;/h2&gt;

&lt;p&gt;When the current coroutine &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt; needs to be switched another one &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt;,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We set the global variable &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_stackbottom&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;stack_bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;We do context-switch between &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The value of &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;stack_bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt; is known when the coroutine is allocated. Allocating a coroutine means most of the time reserving some heap space that will be used as the stack of that coroutine. Hence, the stack bottom is known at that time.&lt;/p&gt;

&lt;p&gt;The edge case is what happens with the first coroutine, the one that belongs to the main thread of the program. Well, by using the global variable &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_stackbottom&lt;/span&gt;&lt;/code&gt; at the beginning of the program we can get the stack bottom of the very first fiber.&lt;/p&gt;

&lt;p&gt;Since we are in a single-thread, all coroutines are either created by the runtime or is the main thread seen as a coroutine.&lt;/p&gt;

&lt;p&gt;How do we do the context-switch? &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt; will make a regular function call to a routine that preserves all the sensible context (this is arch specific), then from the saved context of &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt; the stack pointer is restored and a return is made. Effectively we are hanging &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt; and resuming &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt;. There are some further details of this process in &lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/1.3.2/src/fiber/context.cr&quot;&gt;src/fiber/context.cr&lt;/a&gt; but this does not depend on the GC.&lt;/p&gt;

&lt;p&gt;Addressing the bdw-gc set up part, we use &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_push_other_roots&lt;/span&gt;&lt;/code&gt; to hook before the GC attempts a collect. In this procedure we push all the stacks of the coroutines that are not the current one, i.e.: that are not running.&lt;/p&gt;

&lt;p&gt;The current coroutine stack is already known by the GC via the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_stackbottom&lt;/span&gt;&lt;/code&gt; and all the rest are known via the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_push_other_roots&lt;/span&gt;&lt;/code&gt;. Since the GC will pause the main thread to perform the collect we have a good picture of all the memory we need to care about. Great!&lt;/p&gt;

&lt;h2 id=&quot;multi-thread-coroutines&quot;&gt;multi-thread coroutines&lt;/h2&gt;

&lt;p&gt;Now that the simpler single-thread is covered we can discuss the multi-thread one.&lt;/p&gt;

&lt;p&gt;So far we didn’t need to disable the GC for the single-thread, and it’s better to keep it that way for performance reasons. But for the muti-thread environment we are going to need some lock around the switching fibers routine. We use a global &lt;a href=&quot;https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock&quot;&gt;Read/Write Lock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the current coroutine &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt; needs to be switched another one &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt;,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mark that &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt; is going to be executed in the current thread&lt;/li&gt;
  &lt;li&gt;Add a reader to the global lock&lt;/li&gt;
  &lt;li&gt;We do context-switch between &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Remove a reader from the global lock&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s worth noticing that we are not accessing &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_stackbottom&lt;/span&gt;&lt;/code&gt; as in the single-thread case. Also, the context switch is exactly the same as before.&lt;/p&gt;

&lt;p&gt;Since the last step is not the context switch, this means that we need to remove a reader from the global lock at the beginning of the execution of the fibers. Only in the fibers that are created by the runtime.&lt;/p&gt;

&lt;p&gt;A way to think about this is that after the context switch, the next step is executed in &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt;, not &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_0&lt;/span&gt;&lt;/code&gt;. If &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;C_1&lt;/span&gt;&lt;/code&gt; was previously removed by the coroutine switch the code is in place, but for the very first time it is executed it will need to perform that last step before the instructions indicated by the programmer.&lt;/p&gt;

&lt;p&gt;Addressing the bdw-gc set up part, we still use &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_push_other_roots&lt;/span&gt;&lt;/code&gt; to hook before the GC attempts a collect. In this procedure we push all the stacks of the coroutines that are not running. We also need to deal with the running coroutines, that in this case there is one per application thread (Let’s call it application thread since there are also threads of the GC we can omit).&lt;/p&gt;

&lt;p&gt;So, as part of this procedure we also inform the GC the stack bottom of all running fibers. For this we iterate all application threads and call &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_stackbottom&lt;/span&gt;&lt;/code&gt; with the running fiber’s stack bottom of the iterated thread.&lt;/p&gt;

&lt;p&gt;As the final step of the procedure we remove a writer from the global lock.&lt;/p&gt;

&lt;p&gt;So to recap the procedure registered in &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_push_other_roots&lt;/span&gt;&lt;/code&gt; do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Push all stacks of fibers that are not running&lt;/li&gt;
  &lt;li&gt;Inform via &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_stackbottom&lt;/span&gt;&lt;/code&gt; the stack bottom of each running fiber (one per application thread)&lt;/li&gt;
  &lt;li&gt;Remove a writer from the global lock&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The analogous to the single thread would have been calling the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_stackbottom&lt;/span&gt;&lt;/code&gt; for each context-switch, but calling &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_stackbottom&lt;/span&gt;&lt;/code&gt; acquires a GC lock so it’s better doing it only when necessary. Maybe the single-thread case could mimic this, but for historical reasons we ended up with this difference.&lt;/p&gt;

&lt;p&gt;We are missing where the writers are added to the global lock. This is done in a registered callback at &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_start_callback&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The effect of the global lock is to allow simultaneous context switches, unless there is a collect in progress.&lt;/p&gt;

&lt;p&gt;As in the single-thread case there are two kind of coroutines, a) the ones manually created by the runtime that have a stack that lives in the heap of the program, and b) the ones that correspond to the threads initial stack. Knowing the stack bottom of the first one is as before, the memory is known. For the latter we use &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_get_my_stackbottom&lt;/span&gt;&lt;/code&gt; when the fibers are registered in the runtime.&lt;/p&gt;

&lt;p&gt;So this is how &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_get_my_stackbottom&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;GC_set_stackbottom&lt;/span&gt;&lt;/code&gt; are used to enable coroutines in multi-thread environment! There are a lot of pieces coming together to make this possible so we hope this clarifies how they can be used.&lt;/p&gt;

&lt;h2 id=&quot;the-source-code&quot;&gt;The source code&lt;/h2&gt;

&lt;p&gt;There are couple of details not covered but these are about the Crystal runtime: how to keep a pool of fibers’ stack memory so they are reused, the list of running fibers and threads in a thread-safe linked list, etc. If you are interested in the details for further motivation the relevant files are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/1.3.2/src/gc/boehm.cr&quot;&gt;src/gc/boehm.cr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/1.3.2/src/fiber.cr&quot;&gt;src/fiber.cr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/1.3.2/src/crystal/scheduler.cr&quot;&gt;src/crystal/scheduler.cr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/1.3.2/src/fiber/context/x86_64-sysv.cr&quot;&gt;src/fiber/context/x86_64-sysv.cr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/1.3.2/src/fiber/context.cr&quot;&gt;src/fiber/context.cr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>
  
    <entry>
      <title>Crystal&apos;s interpreter – A very special holiday present</title>
      <author>
        <name>Beta Ziliani</name>
        <uri>https://github.com/beta-ziliani/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/12/29/crystal-i.html" rel="alternate" type="text/html" title="Crystal&apos;s interpreter – A very special holiday present" />
      <published>2021-12-29T00:00:00+00:00</published>
      <updated>2021-12-29T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/12/29/crystal-i</id>
      <summary type="html">The awaited Crystal interpreter has been merged. To use it, you need to compile Crystal with a special flag and, at the time of writing, the official releases (.deb, .rpm, docker images, etc.) are not being compiled with it.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/12/29/crystal-i.html">&lt;p&gt;The awaited Crystal interpreter has been &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11159&quot;&gt;merged&lt;/a&gt;. To use it, you need to compile Crystal with a special flag and, at the time of writing, the official releases (.deb, .rpm, docker images, etc.) are not being compiled with it.&lt;/p&gt;

&lt;p&gt;This post doubles as a F.A.Q. for this special feature. Let’s start from the very beginning:&lt;/p&gt;

&lt;h1 id=&quot;why-crystal-needs-an-interpreter&quot;&gt;Why Crystal needs an interpreter&lt;/h1&gt;

&lt;p&gt;While many will find this obvious, it’s useful to point out two specific features that an interpreter might enable:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In principle an interpreter should start executing code faster, since the codegen phase is skipped (see below), allowing to quickly test the result of some code without needing to recompile. It should be noted that the interpreter is quick for short programs that need to run only once, but compiled mode provides much more performance and should be preferred for most production use cases. Also, while the behavior of interpreted and compiled programs might differ in some aspects (due to the system), we intend to keep the differences down to a minimum, and most programs should behave exactly the same in interpreted and compiled mode.&lt;/li&gt;
  &lt;li&gt;An interpreter improves the experience of debugging, being an ad-hoc tool to the language (unlike the generic &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;lldb&lt;/span&gt;&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-is-the-current-status&quot;&gt;What is the current status?&lt;/h1&gt;

&lt;p&gt;The interpreter is currently on an experimental phase, with lots of &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/11555&quot;&gt;missing bits&lt;/a&gt;. The reason to merge it at this early stage is to enable a proper discussion of interpreter-related PRs and speed up its development a bit. For those willing to try it out, we welcome interpreter-related issues taking into consideration the already known issues aforelinked.&lt;/p&gt;

&lt;h1 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11159&quot;&gt;original PR&lt;/a&gt; answers it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When running in interpreted mode, semantic analysis is done as usual, but instead of then using LLVM to generate code, we compile code to bytecode (custom bytecode defined in this PR, totally unrelated to LLVM). Then there’s an interpreter that understands this bytecode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;how-do-i-invoke-it&quot;&gt;How do I invoke it?&lt;/h1&gt;

&lt;p&gt;⚠️ This is not set in stone!&lt;/p&gt;

&lt;p&gt;Assuming you’ve compiled Crystal passing the flag &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;interpreter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;/code&gt;, you can invoke the interpreter using two modes right now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cr&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This commands runs a file in interpreted mode, so if &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;write_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cr&lt;/span&gt;&lt;/code&gt; contains the following:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;code_section&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from the interpreter!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Invoking &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cr&lt;/span&gt;&lt;/code&gt; will produce the file &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;sr&quot;&gt;/tmp/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;/code&gt; and print &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;/code&gt; to the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command opens an interactive crystal session (REPL) similar to &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;/code&gt; from Ruby. In this session we can write a command and get its result:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;code_section&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;icr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from the interpreter!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Note: the highlighting is not yet part of the interpreter.)&lt;/p&gt;

&lt;h1 id=&quot;debugging-a-program&quot;&gt;Debugging a program&lt;/h1&gt;

&lt;p&gt;In any of these two modes, you can use &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;debugger&lt;/span&gt;&lt;/code&gt; in your code to debug it at that point. This is similar to Ruby’s &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;/code&gt;. There you can use these commands (similar to &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;/code&gt; also):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;/code&gt;: go to the next line/instruction, possibly going inside a method.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;/code&gt;: go to the next line/instruction, doesn’t enter into methods.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;/code&gt;: exit the current method.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt;&lt;/code&gt;: resume execution.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;whereami&lt;/span&gt;&lt;/code&gt;: show where the debugger is.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, if we add &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;debugger&lt;/span&gt;&lt;/code&gt; between the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;/code&gt; and the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;/code&gt; in &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;write_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cr&lt;/span&gt;&lt;/code&gt;, we get the following after interpreting the file:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;code_section&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/tmp/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#/tmp/write_hello.cr:&lt;/span&gt;

    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from the interpreter!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debugger&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;done&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if we &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;/code&gt;, we can see the method form the standard library being called:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;code_section&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Users/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;385&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#puts:&lt;/span&gt;

    &lt;span class=&quot;mi&quot;&gt;380&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints *objects* to `STDOUT`, each followed by a newline character unless&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;382&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the object is a `String` and already ends with a newline.&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;383&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;384&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# See also: `IO#puts`.&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;385&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nil&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;387&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;389&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Inspects *object* to `STDOUT` followed&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;390&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# by a newline. Returns *object*.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, we might be curious: what are the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;/code&gt; that we passed to this method? We &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;/code&gt; once again to have the variable in scope, and we issue:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;code_section&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;how-much-faster-does-the-interpreter-load-a-program&quot;&gt;How much faster does the interpreter load a program?&lt;/h1&gt;

&lt;p&gt;We’re definitely missing benchmarks, more so given that not many shards can be successfully interpreted. Testing on a few random files from the standard library and &lt;a href=&quot;https://github.com/crystal-community/crystal-patterns&quot;&gt;Crystal Patterns&lt;/a&gt;, it loads them (and &lt;em&gt;executes&lt;/em&gt; them, see below) between 50 and 75% faster than it takes when compiling them (comparing &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; vs. &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;). This depends significantly on how much time Crystal takes on the common steps to the compiler and the interpreter, like parsing and semantic analysis.&lt;/p&gt;

&lt;h1 id=&quot;how-fast-or-slow-does-it-run&quot;&gt;How fast (or slow) does it run?&lt;/h1&gt;

&lt;p&gt;As Ary, its creator, &lt;a href=&quot;https://www.youtube.com/watch?v=een_W1YEICw&quot;&gt;showed&lt;/a&gt; in &lt;a href=&quot;https://www.crystal-lang.org/conference/&quot;&gt;Crystal Conf 1.0&lt;/a&gt;, it runs sufficiently fast—for an interpreter that is. Of course, it’s not nearly as efficient as a mature interpreter implementation like Ruby’s, yet in our preliminary tests it runs fast enough for the expected use cases. For instance, it can handle millions of integer additions within the second. This said, using the interpreter for processing intensive tasks is definitively discouraged, as that’s the task for a compiled program.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;To conclude, merging the PR is the first step to get a working interpreter in Crystal and, more importantly, it’s a testament of the will of the Crystal team to improve the developer experience.&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Preparing for Crystal 1.2</title>
      <author>
        <name>Beta Ziliani</name>
        <uri>https://github.com/beta-ziliani/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/09/30/preparing-1.2.html" rel="alternate" type="text/html" title="Preparing for Crystal 1.2" />
      <published>2021-09-30T00:00:00+00:00</published>
      <updated>2021-09-30T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/09/30/preparing-1.2</id>
      <summary type="html">We have reached the feature freeze period for Crystal 1.2. From now on, only bug fixes will be merged into master. The release is scheduled for the 13th of October. As usual, we invite everyone to test our latest nightly release to ensure that we haven’t included a breaking change by mistake (docker 🐳, OS packages 💻).</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/09/30/preparing-1.2.html">&lt;p&gt;We have reached the feature freeze period for Crystal 1.2. From now on, only bug fixes will be merged into master. The release is scheduled for the 13th of October. As usual, we invite everyone to test our latest nightly release to ensure that we haven’t included a breaking change by mistake (&lt;a href=&quot;https://hub.docker.com/r/crystallang/crystal/tags?page=1&amp;amp;ordering=last_updated&amp;amp;name=nightly&quot;&gt;docker 🐳&lt;/a&gt;, &lt;a href=&quot;https://crystal-lang.org/install/&quot;&gt;OS packages 💻&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As of today, we have &lt;a href=&quot;https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.2.0&quot;&gt;162&lt;/a&gt; PRs merged for this version. Thanks to all of those amazing contributors 🙇‍♂️!&lt;/p&gt;

&lt;p&gt;On a bit of a sour note, we are demoting support for 32-bit x86 architectures, moving it from Tier 1 to Tier 2 (that is, &lt;em&gt;expected to build&lt;/em&gt;). As a result, we will not be shipping i386 packages this time. The reason is that &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/11096/checks?check_run_id=3331817376&quot;&gt;the specs are failing&lt;/a&gt;, likely due to the amount of memory they consume. Yet, instead of pursuing a solution to the problem, we decided that it was time to continue the trend towards deprecating this architecture, focusing on bringing native support to more popular platforms like ARM64, M1, and Windows. We note this shouldn’t preclude anyone from building it from source, or from getting the packages from the distributions that officially support Crystal.&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Community moderators</title>
      <author>
        <name>Beta Ziliani</name>
        <uri>https://github.com/beta-ziliani/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/08/24/triage-role.html" rel="alternate" type="text/html" title="Community moderators" />
      <published>2021-08-24T00:00:00+00:00</published>
      <updated>2021-08-24T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/08/24/triage-role</id>
      <summary type="html">Following GitHub’s Triage role, we decided to create the Community moderator role. This new role allows active participants of the community to be granted the ability to assign labels, open/close issues/PRs, apply milestones, mark duplicates, assign issues/PRs and request reviews. This role provides a middle-ground between regular contributors and core team members.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/08/24/triage-role.html">&lt;p&gt;Following GitHub’s &lt;a href=&quot;https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-permission-levels-for-an-organization&quot;&gt;&lt;i&gt;Triage role&lt;/i&gt;&lt;/a&gt;, we decided to create the &lt;em&gt;Community moderator&lt;/em&gt; role.
This new role allows active participants of the community to be granted the ability to assign labels, open/close issues/PRs, apply milestones, mark duplicates, assign issues/PRs and request reviews. This role provides a middle-ground between regular contributors and core team members.&lt;/p&gt;

&lt;p&gt;Community moderators are listed in the relevant section at the &lt;a href=&quot;/team#moderators&quot;&gt;Team page&lt;/a&gt;. If you are an active contributor of the project and feel you can level up your involvement with it, check the &lt;a href=&quot;/team#join_us&quot;&gt;Join the Team&lt;/a&gt; section.&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Installing specific versions of Crystal&apos;s binary packages</title>
      <author>
        <name>Johannes Müller</name>
        <uri>https://github.com/straight-shoota/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/08/13/install-specific-versions.html" rel="alternate" type="text/html" title="Installing specific versions of Crystal&apos;s binary packages" />
      <published>2021-08-13T00:00:00+00:00</published>
      <updated>2021-08-13T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/08/13/install-specific-versions</id>
      <summary type="html">When we moved hosting of Crystal’s binary packages to the Open Build Service (OBS), in May 2021, only the latest release (1.0.0 at that time) was available.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/08/13/install-specific-versions.html">&lt;p&gt;When we &lt;a href=&quot;/2021/04/30/new-apt-and-rpm-repositories.html&quot;&gt;moved hosting of Crystal’s binary packages&lt;/a&gt; to the &lt;a href=&quot;https://build.opensuse.org&quot;&gt;Open Build Service (OBS)&lt;/a&gt;,
in May 2021, only the latest release (1.0.0 at that time) was available.&lt;/p&gt;

&lt;p&gt;Since then, there have been more releases (1.1.0 and 1.1.1) but in the package repositories only the latest one was available at any time.&lt;/p&gt;

&lt;p&gt;We’ve now added support for installing specific releases of Crystal via OBS.
There are individual packages for each minor release.&lt;/p&gt;

&lt;p&gt;At the moment, there are three different packages available at &lt;a href=&quot;https://build.opensuse.org/project/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt; (1.0.0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt; (1.1.1)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;/code&gt; (1.1.1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The non-versioned &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;/code&gt; package keeps tracking the latest stable release,
versioned packages keep tracking the latest patch release of the respective minor version.&lt;/p&gt;

&lt;p&gt;The new versioned packages are available for all architectures in all repositories on OBS.&lt;/p&gt;

&lt;p&gt;Our own installation instructions at &lt;a href=&quot;/install&quot;&gt;crystal-lang.org/install&lt;/a&gt; have been updated,
including the automatic installer script.&lt;/p&gt;

&lt;p&gt;The installer script allows selecting the version to be installed via tha &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;/code&gt; argument.
This argument was previously called &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;/code&gt; and while this name continues to work, it is now considered deprecated.&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>IRC channel moved to Libera Chat</title>
      <author>
        <name>Jonne Hass</name>
        <uri>https://github.com/jhass/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat.html" rel="alternate" type="text/html" title="IRC channel moved to Libera Chat" />
      <published>2021-06-04T00:00:00+00:00</published>
      <updated>2021-06-04T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat</id>
      <summary type="html">Due to the recent changes on management in the Freenode network and the subsequent migration of the majority of active users to Libera Chat, we have moved our IRC presence there, too.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/06/04/irc-channel-moved-to-libera-chat.html">&lt;p&gt;Due to the recent changes on management in the Freenode network and the subsequent migration of the majority of active users to Libera Chat, we have moved our IRC presence there, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://web.libera.chat/#crystal-lang&quot;&gt;#crystal-lang&lt;/a&gt; on Libera Chat will be our primary IRC presence from now on. The bridge to our Gitter room has moved there, too.&lt;/p&gt;

&lt;p&gt;Learn more about meeting other Crystal users on our &lt;a href=&quot;/community&quot;&gt;community page&lt;/a&gt;!&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Behind the scenes of the past two months</title>
      <author>
        <name>Beta Ziliani</name>
        <uri>https://github.com/beta-ziliani/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/06/01/behind-the-scenes.html" rel="alternate" type="text/html" title="Behind the scenes of the past two months" />
      <published>2021-06-01T00:00:00+00:00</published>
      <updated>2021-06-01T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/06/01/behind-the-scenes</id>
      <summary type="html">A couple of months since the first official release, the steam of PR reviewing and merging has appeased a bit. This gives us an opportunity to share some of what’s been happening behind the scenes: a bunch of big things are coming!</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/06/01/behind-the-scenes.html">&lt;p&gt;A couple of months since the first official release, the steam of PR reviewing and merging has appeased a bit. This gives us an opportunity to share some of what’s been happening behind the scenes: a bunch of big things are coming!&lt;/p&gt;

&lt;p&gt;We’ve already mentioned important &lt;a href=&quot;https://crystal-lang.org/2021/03/22/crystal-core-team-announcements.html&quot;&gt;changes in the Core Team composition&lt;/a&gt;. In practice, this involved a great deal of passing knowledge on to the new leadership. More importantly, the 1.0 release presented us with an opportunity to pause and think about how we want the language to evolve and how we want to conduct the project from a higher perspective.&lt;/p&gt;

&lt;p&gt;Thus, we have set the following list of priorities to help us steer our actions:&lt;/p&gt;

&lt;h3 id=&quot;transparency&quot;&gt;Transparency&lt;/h3&gt;

&lt;p&gt;Transparency has always been a cornerstone of how Crystal is led and developed. It is very important for us to continue along this line, and we’re thinking of new ways to let our community know how the decision processes work in the governance of Crystal. In this respect we took two steps: first, we published the &lt;a href=&quot;https://crystal-lang.org/reference/governance.html&quot;&gt;Crystal governance document&lt;/a&gt;, where we outlined the bodies in charge of running Crystal, together with the processes we follow for making decisions about the language. Second, we published a new &lt;a href=&quot;https://crystal-lang.org/team&quot;&gt;Team page&lt;/a&gt;, where everyone can see at a glance who is involved in the day-to-day management of the language.&lt;/p&gt;

&lt;h3 id=&quot;growing-the-core-team&quot;&gt;Growing the Core Team&lt;/h3&gt;

&lt;p&gt;With a few members becoming inactive, we wanted to grow the number of core members to keep our pace and, if possible, increase it. In this respect, we are very happy to announce that &lt;a href=&quot;https://github.com/oprypin/&quot;&gt;Oleh Prypin (oprypin)&lt;/a&gt; is our newest addition to the team, and our second run of voting in a member in accordance with the new governance (the first one being for my own inclusion). Oleh has been an active member of our community since 2015, and has shown a great capacity to improve the language and its ecosystem in every one of his contributions.&lt;/p&gt;

&lt;h3 id=&quot;fixed-releases&quot;&gt;Fixed releases&lt;/h3&gt;

&lt;p&gt;We want the community to know when to expect each new release, so we are working on ways to make them more regular, with a freeze period of 2-3 weeks in order to let people update their shards and programs, and work on possible regressions. We are still working on the details, but likely there will be three months between a 1.x and 1.(x+1) release.&lt;/p&gt;

&lt;h3 id=&quot;native-support-on-windows-and-the-newly-released-macs&quot;&gt;Native support on Windows and the newly released Macs&lt;/h3&gt;

&lt;p&gt;Aiming for wider adoption, we want every major platform to have a native Crystal compiler. We have made significant steps towards Windows support, with the sockets library being almost ready. As for the ARM Macs, we need to get our compiler working with the latest versions of the LLVM framework, a hard stone to crack in which we have already made good progress.&lt;/p&gt;

&lt;p&gt;As you can see, these past two months have been quite busy attacking several fronts, including the preparation of what will surely be an amazing &lt;a href=&quot;https://crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html&quot;&gt;conference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. To maintain and increase the development pace, donations and sponsorships are essential. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;

&lt;p&gt;Stay tuned, there’s a lot more coming!&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Announcing new apt and rpm repositories</title>
      <author>
        <name>Johannes Müller</name>
        <uri>https://github.com/straight-shoota/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories.html" rel="alternate" type="text/html" title="Announcing new apt and rpm repositories" />
      <published>2021-04-30T00:00:00+00:00</published>
      <updated>2021-04-30T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories</id>
      <summary type="html">With our previous distribution hosting at bintray shutting down, we transitioned to the Open Build Service (OBS), a cross-platform package building service provided by openSUSE.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/04/30/new-apt-and-rpm-repositories.html">&lt;p&gt;With our previous distribution hosting at &lt;a href=&quot;https://bintray.com/crystal&quot;&gt;bintray&lt;/a&gt;
shutting down, we transitioned to the &lt;a href=&quot;https://build.opensuse.org&quot;&gt;Open Build Service (OBS)&lt;/a&gt;,
a cross-platform package building service provided by openSUSE.&lt;/p&gt;

&lt;p&gt;Instead of just hosting the packages, it takes care of the entire build process.
For now we continue to provide deb and rpm repositories for x86_64 and i686,
but more platforms and architectures will follow.&lt;/p&gt;

&lt;p&gt;All packages are available on OBS at &lt;a href=&quot;https://build.opensuse.org/project/show/devel:languages:crystal&quot;&gt;build.opensuse.org/package/show/devel:languages:crystal&lt;/a&gt;.
It offers an &lt;a href=&quot;https://software.opensuse.org/download.html?project=devel%3Alanguages%3Acrystal&amp;amp;package=crystal&quot;&gt;installation page&lt;/a&gt; with detailed instructions for the many different
target systems.
Our own installation instructions at &lt;a href=&quot;/install&quot;&gt;crystal-lang.org/install&lt;/a&gt; have been updated,
including the automatic installer script.&lt;/p&gt;

&lt;p&gt;Since bintray is shutting down all operations on May 1st, 2021 our previous repositories
won’t be available anymore. Please update to the new OBS repositories.
Running the updated installation script should override the previous configuration
in  &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;sr&quot;&gt;/etc/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;/code&gt; and  &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;sr&quot;&gt;/etc/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repo&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell-session highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;code_section&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Only the latest stable release Crystal 1.0.0 is available in the new
package repositories.
Thus the &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;/code&gt; flag on the installation script is currently ignored,
and &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crystal&lt;/span&gt;&lt;/code&gt; only allows the values &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;latest&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt; (with identical semantics).
Nightly builds and unstable releases will be available in the future.&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Announcing Crystal 1.0 Conference</title>
      <author>
        <name>Beta Ziliani</name>
        <uri>https://github.com/beta-ziliani/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html" rel="alternate" type="text/html" title="Announcing Crystal 1.0 Conference" />
      <published>2021-04-22T00:00:00+00:00</published>
      <updated>2021-04-22T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/04/22/crystal-conference-1.0-launch</id>
      <summary type="html">A decade ago, when Crystal was a quirky idea that a few people talked about in their spare time at Manas, it was impossible to think we would go through so many things on our way to releasing a stable and production ready 1.0 version. It was also unimaginable that such a generous community would form around Crystal, with people from all over the world that have been following every development, providing their views and advice, and contributing to the project both financially and with their work.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/04/22/crystal-conference-1.0-launch.html">&lt;p&gt;A decade ago, when Crystal was a quirky idea that a few people talked about in their spare time at Manas, it was impossible to think we would go through so many things on our way to releasing a stable and production ready 1.0 version.
It was also unimaginable that such a generous community would form around Crystal, with people from all over the world that have been following every development, providing their views and advice, and contributing to the project both financially and with their work.&lt;/p&gt;

&lt;p&gt;Going forward, we want to continue the evolution of the language on delighting its users. But we still want to &lt;strong&gt;take a moment to celebrate the 1.0 milestone&lt;/strong&gt;, and we decided a conference was the best way to do that.&lt;/p&gt;

&lt;p&gt;The online conference takes place on &lt;strong&gt;July 8, 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-a-crystal-10-launch-conference&quot;&gt;Why a Crystal 1.0 Launch Conference?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Many people have been a part of the Crystal universe for years, and many others are only now hearing about it. A conference is an ideal vehicle for those who’ve been around for a long time to show the newcomers what it’s all about.&lt;/li&gt;
  &lt;li&gt;Over the years, organizations and individuals have trusted Crystal and used it for their projects, some of them experiments and some of them core to their business. We want to give them a platform to share their stories in the hopes that it inspires others to follow in their footsteps.&lt;/li&gt;
  &lt;li&gt;We believe that dialogue is a central element in the evolution of initiatives like Crystal, and a conference creates a space to amplify the conversation channels between the Core Team and the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Conference will feature talks from the team developing the language, people using Crystal in production, folks who have been conducting experiments with Crystal, people who come from other languages and can bring cool insights to our community, and we are extending the invitation to users, developers, and contributors in general who want to present a talk.&lt;/p&gt;

&lt;p&gt;To get your tickets, go to the &lt;a href=&quot;https://www.eventbrite.com.ar/e/crystal-conference-10-launch-tickets-149153252393&quot;&gt;&lt;strong&gt;Crystal Conference 1.0 Launch&lt;/strong&gt; page on Eventbrite&lt;/a&gt;. All proceeds from the event will be destined to maintain and increase the development pace of the language. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal.&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;call-for-talks&quot;&gt;Call for Talks&lt;/h3&gt;

&lt;p&gt;We are inviting Crystal users, developers, and contributors in general to submit their talks for the Crystal 1.0 Conference.&lt;/p&gt;

&lt;p&gt;Topics can cover anything related to the experience with Crystal that is worth sharing to other Crystallers around the globe, or that people from other languages can bring to our community: interesting shards, particularities of the compiler, benchmarks, etc.&lt;/p&gt;

&lt;p&gt;Submit a talk proposal at: &lt;a href=&quot;https://man.as/crystal-cft&quot;&gt;man.as/crystal-cft&lt;/a&gt;&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>Crystal Core Team Announcements</title>
      <author>
        <name>Nicolás di Tada</name>
        <uri>https://github.com/nditada/</uri>
      </author>
      <link href="https://ja.crystal-lang.org/2021/03/22/crystal-core-team-announcements.html" rel="alternate" type="text/html" title="Crystal Core Team Announcements" />
      <published>2021-03-22T00:00:00+00:00</published>
      <updated>2021-03-22T00:00:00+00:00</updated>
      <id>https://ja.crystal-lang.org/2021/03/22/crystal-core-team-announcements</id>
      <summary type="html">A lot has been going on in the Crystal Core Team, and the community has voiced its need for more (and more frequent) communication. This post is an attempt to catch up with that. I’m taking the license of using “we” for both Crystal and Manas.Tech in this short update.</summary>
      <content type="html" xml:base="https://ja.crystal-lang.org/2021/03/22/crystal-core-team-announcements.html">&lt;p&gt;A lot has been going on in the Crystal Core Team, and the community has voiced its need for more (and more frequent) communication. This post is an attempt to catch up with that. I’m taking the license of using “we” for both Crystal and Manas.Tech in this short update.&lt;/p&gt;

&lt;p&gt;The team has been moving forward and focusing on &lt;a href=&quot;/2021/03/22/crystal-1.0-what-to-expect.html&quot;&gt;releasing 1.0&lt;/a&gt;, which is intended to be a more stabilized version of 0.36 with few new additions. We know that we could always add, fix or improve one more little thing before releasing. Still, we believe this is long overdue and that the lack of a v1.0 is an obstacle to adoption.&lt;/p&gt;

&lt;p&gt;We wanted to share the news that Johannes Müller (@straightshoota) has joined Manas as a full-time employee. Johannes is a years-long member and contributor of the Core Team, and we are thrilled to have him join us to continue to work on the language’s evolution.&lt;/p&gt;

&lt;p&gt;Coincidentally, Brian (@bcardiff) and Juan (@waj) will be moving onto new challenges outside Manas, though Juan will remain in an advisory role. This does not affect their commitment to the development of Crystal. They will remain part of the Crystal Core Team and continue to be involved as voluntary contributors.&lt;/p&gt;

&lt;p&gt;But we have excellent news in terms of Crystal leadership coming from Manas. We are incredibly excited to announce that &lt;a href=&quot;https://people.mpi-sws.org/~beta/&quot;&gt;Beta Ziliani&lt;/a&gt; will join the Crystal team at Manas to pick-up the baton. Beta is a programming language researcher with a Ph.D. from the Max Planck Institute for Software Systems and holds a professorship on Advanced Concepts of Programming Languages and Paradigms of Programming. He has been involved with Crystal for a while. Beta was one of the first Manas employees, and he left to pursue his academic research more than ten years ago. We are proud and happy to have him join back.&lt;/p&gt;

&lt;p&gt;We also wanted to announce that Manas will be hiring a Community Manager for Crystal. We know that’s a long overdue need, and we are excited to find the right person to steward this fantastic community. Please help us &lt;a href=&quot;https://manas.tech/join/&quot;&gt;spread the word&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To make all this sustainable in the long term, we need to significantly increase our sponsorships and donations. We believe the 1.0 release and the new roles described will help us move towards that. All small personal donations at &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; help, and if you work at a company that could become a corporate sponsor, please reach out at &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; so we can work with you.&lt;/p&gt;</content>
    </entry>
  
</feed>
